/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yougou.kaidian.commodity.thrift;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CmsPageResultsInfos implements org.apache.thrift.TBase<CmsPageResultsInfos, CmsPageResultsInfos._Fields>, java.io.Serializable, Cloneable, Comparable<CmsPageResultsInfos> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CmsPageResultsInfos");

  private static final org.apache.thrift.protocol.TField TOTAL_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalItems", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField H_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("hItems", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField BRAND_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("brandItems", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CmsPageResultsInfosStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CmsPageResultsInfosTupleSchemeFactory());
  }

  public int totalItems; // required
  public int pageSize; // required
  public int pageNo; // required
  public List<String> items; // required
  public List<Map<String,String>> hItems; // required
  public List<NewCmsBrand> brandItems; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_ITEMS((short)1, "totalItems"),
    PAGE_SIZE((short)2, "pageSize"),
    PAGE_NO((short)3, "pageNo"),
    ITEMS((short)4, "items"),
    H_ITEMS((short)5, "hItems"),
    BRAND_ITEMS((short)6, "brandItems");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_ITEMS
          return TOTAL_ITEMS;
        case 2: // PAGE_SIZE
          return PAGE_SIZE;
        case 3: // PAGE_NO
          return PAGE_NO;
        case 4: // ITEMS
          return ITEMS;
        case 5: // H_ITEMS
          return H_ITEMS;
        case 6: // BRAND_ITEMS
          return BRAND_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALITEMS_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private static final int __PAGENO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("totalItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.H_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("hItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.BRAND_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("brandItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NewCmsBrand.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CmsPageResultsInfos.class, metaDataMap);
  }

  public CmsPageResultsInfos() {
  }

  public CmsPageResultsInfos(
    int totalItems,
    int pageSize,
    int pageNo,
    List<String> items,
    List<Map<String,String>> hItems,
    List<NewCmsBrand> brandItems)
  {
    this();
    this.totalItems = totalItems;
    setTotalItemsIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.pageNo = pageNo;
    setPageNoIsSet(true);
    this.items = items;
    this.hItems = hItems;
    this.brandItems = brandItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CmsPageResultsInfos(CmsPageResultsInfos other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalItems = other.totalItems;
    this.pageSize = other.pageSize;
    this.pageNo = other.pageNo;
    if (other.isSetItems()) {
      List<String> __this__items = new ArrayList<String>(other.items);
      this.items = __this__items;
    }
    if (other.isSetHItems()) {
      List<Map<String,String>> __this__hItems = new ArrayList<Map<String,String>>(other.hItems.size());
      for (Map<String,String> other_element : other.hItems) {
        Map<String,String> __this__hItems_copy = new HashMap<String,String>(other_element);
        __this__hItems.add(__this__hItems_copy);
      }
      this.hItems = __this__hItems;
    }
    if (other.isSetBrandItems()) {
      List<NewCmsBrand> __this__brandItems = new ArrayList<NewCmsBrand>(other.brandItems.size());
      for (NewCmsBrand other_element : other.brandItems) {
        __this__brandItems.add(new NewCmsBrand(other_element));
      }
      this.brandItems = __this__brandItems;
    }
  }

  public CmsPageResultsInfos deepCopy() {
    return new CmsPageResultsInfos(this);
  }

  @Override
  public void clear() {
    setTotalItemsIsSet(false);
    this.totalItems = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setPageNoIsSet(false);
    this.pageNo = 0;
    this.items = null;
    this.hItems = null;
    this.brandItems = null;
  }

  public int getTotalItems() {
    return this.totalItems;
  }

  public CmsPageResultsInfos setTotalItems(int totalItems) {
    this.totalItems = totalItems;
    setTotalItemsIsSet(true);
    return this;
  }

  public void unsetTotalItems() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALITEMS_ISSET_ID);
  }

  /** Returns true if field totalItems is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalItems() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALITEMS_ISSET_ID);
  }

  public void setTotalItemsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALITEMS_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public CmsPageResultsInfos setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getPageNo() {
    return this.pageNo;
  }

  public CmsPageResultsInfos setPageNo(int pageNo) {
    this.pageNo = pageNo;
    setPageNoIsSet(true);
    return this;
  }

  public void unsetPageNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNo() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  public void setPageNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<String> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(String elem) {
    if (this.items == null) {
      this.items = new ArrayList<String>();
    }
    this.items.add(elem);
  }

  public List<String> getItems() {
    return this.items;
  }

  public CmsPageResultsInfos setItems(List<String> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public int getHItemsSize() {
    return (this.hItems == null) ? 0 : this.hItems.size();
  }

  public java.util.Iterator<Map<String,String>> getHItemsIterator() {
    return (this.hItems == null) ? null : this.hItems.iterator();
  }

  public void addToHItems(Map<String,String> elem) {
    if (this.hItems == null) {
      this.hItems = new ArrayList<Map<String,String>>();
    }
    this.hItems.add(elem);
  }

  public List<Map<String,String>> getHItems() {
    return this.hItems;
  }

  public CmsPageResultsInfos setHItems(List<Map<String,String>> hItems) {
    this.hItems = hItems;
    return this;
  }

  public void unsetHItems() {
    this.hItems = null;
  }

  /** Returns true if field hItems is set (has been assigned a value) and false otherwise */
  public boolean isSetHItems() {
    return this.hItems != null;
  }

  public void setHItemsIsSet(boolean value) {
    if (!value) {
      this.hItems = null;
    }
  }

  public int getBrandItemsSize() {
    return (this.brandItems == null) ? 0 : this.brandItems.size();
  }

  public java.util.Iterator<NewCmsBrand> getBrandItemsIterator() {
    return (this.brandItems == null) ? null : this.brandItems.iterator();
  }

  public void addToBrandItems(NewCmsBrand elem) {
    if (this.brandItems == null) {
      this.brandItems = new ArrayList<NewCmsBrand>();
    }
    this.brandItems.add(elem);
  }

  public List<NewCmsBrand> getBrandItems() {
    return this.brandItems;
  }

  public CmsPageResultsInfos setBrandItems(List<NewCmsBrand> brandItems) {
    this.brandItems = brandItems;
    return this;
  }

  public void unsetBrandItems() {
    this.brandItems = null;
  }

  /** Returns true if field brandItems is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandItems() {
    return this.brandItems != null;
  }

  public void setBrandItemsIsSet(boolean value) {
    if (!value) {
      this.brandItems = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_ITEMS:
      if (value == null) {
        unsetTotalItems();
      } else {
        setTotalItems((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case PAGE_NO:
      if (value == null) {
        unsetPageNo();
      } else {
        setPageNo((Integer)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<String>)value);
      }
      break;

    case H_ITEMS:
      if (value == null) {
        unsetHItems();
      } else {
        setHItems((List<Map<String,String>>)value);
      }
      break;

    case BRAND_ITEMS:
      if (value == null) {
        unsetBrandItems();
      } else {
        setBrandItems((List<NewCmsBrand>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_ITEMS:
      return Integer.valueOf(getTotalItems());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case PAGE_NO:
      return Integer.valueOf(getPageNo());

    case ITEMS:
      return getItems();

    case H_ITEMS:
      return getHItems();

    case BRAND_ITEMS:
      return getBrandItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_ITEMS:
      return isSetTotalItems();
    case PAGE_SIZE:
      return isSetPageSize();
    case PAGE_NO:
      return isSetPageNo();
    case ITEMS:
      return isSetItems();
    case H_ITEMS:
      return isSetHItems();
    case BRAND_ITEMS:
      return isSetBrandItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CmsPageResultsInfos)
      return this.equals((CmsPageResultsInfos)that);
    return false;
  }

  public boolean equals(CmsPageResultsInfos that) {
    if (that == null)
      return false;

    boolean this_present_totalItems = true;
    boolean that_present_totalItems = true;
    if (this_present_totalItems || that_present_totalItems) {
      if (!(this_present_totalItems && that_present_totalItems))
        return false;
      if (this.totalItems != that.totalItems)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_pageNo = true;
    boolean that_present_pageNo = true;
    if (this_present_pageNo || that_present_pageNo) {
      if (!(this_present_pageNo && that_present_pageNo))
        return false;
      if (this.pageNo != that.pageNo)
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_hItems = true && this.isSetHItems();
    boolean that_present_hItems = true && that.isSetHItems();
    if (this_present_hItems || that_present_hItems) {
      if (!(this_present_hItems && that_present_hItems))
        return false;
      if (!this.hItems.equals(that.hItems))
        return false;
    }

    boolean this_present_brandItems = true && this.isSetBrandItems();
    boolean that_present_brandItems = true && that.isSetBrandItems();
    if (this_present_brandItems || that_present_brandItems) {
      if (!(this_present_brandItems && that_present_brandItems))
        return false;
      if (!this.brandItems.equals(that.brandItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CmsPageResultsInfos other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotalItems()).compareTo(other.isSetTotalItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalItems, other.totalItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHItems()).compareTo(other.isSetHItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hItems, other.hItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandItems()).compareTo(other.isSetBrandItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandItems, other.brandItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CmsPageResultsInfos(");
    boolean first = true;

    sb.append("totalItems:");
    sb.append(this.totalItems);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageNo:");
    sb.append(this.pageNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("items:");
    if (this.items == null) {
      sb.append("null");
    } else {
      sb.append(this.items);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hItems:");
    if (this.hItems == null) {
      sb.append("null");
    } else {
      sb.append(this.hItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandItems:");
    if (this.brandItems == null) {
      sb.append("null");
    } else {
      sb.append(this.brandItems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CmsPageResultsInfosStandardSchemeFactory implements SchemeFactory {
    public CmsPageResultsInfosStandardScheme getScheme() {
      return new CmsPageResultsInfosStandardScheme();
    }
  }

  private static class CmsPageResultsInfosStandardScheme extends StandardScheme<CmsPageResultsInfos> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CmsPageResultsInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalItems = iprot.readI32();
              struct.setTotalItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNo = iprot.readI32();
              struct.setPageNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.items = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.items.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // H_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.hItems = new ArrayList<Map<String,String>>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  Map<String,String> _elem5;
                  {
                    org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                    _elem5 = new HashMap<String,String>(2*_map6.size);
                    for (int _i7 = 0; _i7 < _map6.size; ++_i7)
                    {
                      String _key8;
                      String _val9;
                      _key8 = iprot.readString();
                      _val9 = iprot.readString();
                      _elem5.put(_key8, _val9);
                    }
                    iprot.readMapEnd();
                  }
                  struct.hItems.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setHItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BRAND_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.brandItems = new ArrayList<NewCmsBrand>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  NewCmsBrand _elem12;
                  _elem12 = new NewCmsBrand();
                  _elem12.read(iprot);
                  struct.brandItems.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setBrandItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CmsPageResultsInfos struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_ITEMS_FIELD_DESC);
      oprot.writeI32(struct.totalItems);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
      oprot.writeI32(struct.pageNo);
      oprot.writeFieldEnd();
      if (struct.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.items.size()));
          for (String _iter13 : struct.items)
          {
            oprot.writeString(_iter13);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.hItems != null) {
        oprot.writeFieldBegin(H_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.hItems.size()));
          for (Map<String,String> _iter14 : struct.hItems)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter14.size()));
              for (Map.Entry<String, String> _iter15 : _iter14.entrySet())
              {
                oprot.writeString(_iter15.getKey());
                oprot.writeString(_iter15.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.brandItems != null) {
        oprot.writeFieldBegin(BRAND_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.brandItems.size()));
          for (NewCmsBrand _iter16 : struct.brandItems)
          {
            _iter16.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CmsPageResultsInfosTupleSchemeFactory implements SchemeFactory {
    public CmsPageResultsInfosTupleScheme getScheme() {
      return new CmsPageResultsInfosTupleScheme();
    }
  }

  private static class CmsPageResultsInfosTupleScheme extends TupleScheme<CmsPageResultsInfos> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CmsPageResultsInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTotalItems()) {
        optionals.set(0);
      }
      if (struct.isSetPageSize()) {
        optionals.set(1);
      }
      if (struct.isSetPageNo()) {
        optionals.set(2);
      }
      if (struct.isSetItems()) {
        optionals.set(3);
      }
      if (struct.isSetHItems()) {
        optionals.set(4);
      }
      if (struct.isSetBrandItems()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTotalItems()) {
        oprot.writeI32(struct.totalItems);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetPageNo()) {
        oprot.writeI32(struct.pageNo);
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (String _iter17 : struct.items)
          {
            oprot.writeString(_iter17);
          }
        }
      }
      if (struct.isSetHItems()) {
        {
          oprot.writeI32(struct.hItems.size());
          for (Map<String,String> _iter18 : struct.hItems)
          {
            {
              oprot.writeI32(_iter18.size());
              for (Map.Entry<String, String> _iter19 : _iter18.entrySet())
              {
                oprot.writeString(_iter19.getKey());
                oprot.writeString(_iter19.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetBrandItems()) {
        {
          oprot.writeI32(struct.brandItems.size());
          for (NewCmsBrand _iter20 : struct.brandItems)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CmsPageResultsInfos struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.totalItems = iprot.readI32();
        struct.setTotalItemsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pageNo = iprot.readI32();
        struct.setPageNoIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.items = new ArrayList<String>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            String _elem23;
            _elem23 = iprot.readString();
            struct.items.add(_elem23);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list24 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.hItems = new ArrayList<Map<String,String>>(_list24.size);
          for (int _i25 = 0; _i25 < _list24.size; ++_i25)
          {
            Map<String,String> _elem26;
            {
              org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem26 = new HashMap<String,String>(2*_map27.size);
              for (int _i28 = 0; _i28 < _map27.size; ++_i28)
              {
                String _key29;
                String _val30;
                _key29 = iprot.readString();
                _val30 = iprot.readString();
                _elem26.put(_key29, _val30);
              }
            }
            struct.hItems.add(_elem26);
          }
        }
        struct.setHItemsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.brandItems = new ArrayList<NewCmsBrand>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            NewCmsBrand _elem33;
            _elem33 = new NewCmsBrand();
            _elem33.read(iprot);
            struct.brandItems.add(_elem33);
          }
        }
        struct.setBrandItemsIsSet(true);
      }
    }
  }

}

