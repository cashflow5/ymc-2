/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yougou.kaidian.commodity.thrift;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NewCmsBrand implements org.apache.thrift.TBase<NewCmsBrand, NewCmsBrand._Fields>, java.io.Serializable, Cloneable, Comparable<NewCmsBrand> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NewCmsBrand");

  private static final org.apache.thrift.protocol.TField BRIEF_FIELD_DESC = new org.apache.thrift.protocol.TField("brief", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DETAILED_BRIEF_FIELD_DESC = new org.apache.thrift.protocol.TField("detailed_brief", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BRAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brand_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("page_title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PAGE_KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("page_keywords", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAGE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("page_description", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_H1_FIELD_DESC = new org.apache.thrift.protocol.TField("page_h1", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SIZE_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("size_table", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FRIEND_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("friend_link", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BRAND_SELECT_VISIBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("brand_select_visible", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DELETE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("delete_flag", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BRAND_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("brand_name", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BRAND_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("brand_no", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ENGLISH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("english_name", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LOGO_SMALL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("logo_small_url", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NewCmsBrandStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NewCmsBrandTupleSchemeFactory());
  }

  public String brief; // required
  public String detailed_brief; // required
  public String brand_id; // required
  public String page_title; // required
  public String page_keywords; // required
  public String page_description; // required
  public String page_h1; // required
  public String size_table; // required
  public String friend_link; // required
  public String brand_select_visible; // required
  public String delete_flag; // required
  public String brand_name; // required
  public String brand_no; // required
  public String english_name; // required
  public String logo_small_url; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BRIEF((short)1, "brief"),
    DETAILED_BRIEF((short)2, "detailed_brief"),
    BRAND_ID((short)3, "brand_id"),
    PAGE_TITLE((short)4, "page_title"),
    PAGE_KEYWORDS((short)5, "page_keywords"),
    PAGE_DESCRIPTION((short)6, "page_description"),
    PAGE_H1((short)7, "page_h1"),
    SIZE_TABLE((short)8, "size_table"),
    FRIEND_LINK((short)9, "friend_link"),
    BRAND_SELECT_VISIBLE((short)10, "brand_select_visible"),
    DELETE_FLAG((short)11, "delete_flag"),
    BRAND_NAME((short)12, "brand_name"),
    BRAND_NO((short)13, "brand_no"),
    ENGLISH_NAME((short)14, "english_name"),
    LOGO_SMALL_URL((short)15, "logo_small_url");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BRIEF
          return BRIEF;
        case 2: // DETAILED_BRIEF
          return DETAILED_BRIEF;
        case 3: // BRAND_ID
          return BRAND_ID;
        case 4: // PAGE_TITLE
          return PAGE_TITLE;
        case 5: // PAGE_KEYWORDS
          return PAGE_KEYWORDS;
        case 6: // PAGE_DESCRIPTION
          return PAGE_DESCRIPTION;
        case 7: // PAGE_H1
          return PAGE_H1;
        case 8: // SIZE_TABLE
          return SIZE_TABLE;
        case 9: // FRIEND_LINK
          return FRIEND_LINK;
        case 10: // BRAND_SELECT_VISIBLE
          return BRAND_SELECT_VISIBLE;
        case 11: // DELETE_FLAG
          return DELETE_FLAG;
        case 12: // BRAND_NAME
          return BRAND_NAME;
        case 13: // BRAND_NO
          return BRAND_NO;
        case 14: // ENGLISH_NAME
          return ENGLISH_NAME;
        case 15: // LOGO_SMALL_URL
          return LOGO_SMALL_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BRIEF, new org.apache.thrift.meta_data.FieldMetaData("brief", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAILED_BRIEF, new org.apache.thrift.meta_data.FieldMetaData("detailed_brief", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND_ID, new org.apache.thrift.meta_data.FieldMetaData("brand_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_TITLE, new org.apache.thrift.meta_data.FieldMetaData("page_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("page_keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("page_description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_H1, new org.apache.thrift.meta_data.FieldMetaData("page_h1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE_TABLE, new org.apache.thrift.meta_data.FieldMetaData("size_table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FRIEND_LINK, new org.apache.thrift.meta_data.FieldMetaData("friend_link", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND_SELECT_VISIBLE, new org.apache.thrift.meta_data.FieldMetaData("brand_select_visible", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELETE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("delete_flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND_NAME, new org.apache.thrift.meta_data.FieldMetaData("brand_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND_NO, new org.apache.thrift.meta_data.FieldMetaData("brand_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENGLISH_NAME, new org.apache.thrift.meta_data.FieldMetaData("english_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGO_SMALL_URL, new org.apache.thrift.meta_data.FieldMetaData("logo_small_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewCmsBrand.class, metaDataMap);
  }

  public NewCmsBrand() {
  }

  public NewCmsBrand(
    String brief,
    String detailed_brief,
    String brand_id,
    String page_title,
    String page_keywords,
    String page_description,
    String page_h1,
    String size_table,
    String friend_link,
    String brand_select_visible,
    String delete_flag,
    String brand_name,
    String brand_no,
    String english_name,
    String logo_small_url)
  {
    this();
    this.brief = brief;
    this.detailed_brief = detailed_brief;
    this.brand_id = brand_id;
    this.page_title = page_title;
    this.page_keywords = page_keywords;
    this.page_description = page_description;
    this.page_h1 = page_h1;
    this.size_table = size_table;
    this.friend_link = friend_link;
    this.brand_select_visible = brand_select_visible;
    this.delete_flag = delete_flag;
    this.brand_name = brand_name;
    this.brand_no = brand_no;
    this.english_name = english_name;
    this.logo_small_url = logo_small_url;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NewCmsBrand(NewCmsBrand other) {
    if (other.isSetBrief()) {
      this.brief = other.brief;
    }
    if (other.isSetDetailed_brief()) {
      this.detailed_brief = other.detailed_brief;
    }
    if (other.isSetBrand_id()) {
      this.brand_id = other.brand_id;
    }
    if (other.isSetPage_title()) {
      this.page_title = other.page_title;
    }
    if (other.isSetPage_keywords()) {
      this.page_keywords = other.page_keywords;
    }
    if (other.isSetPage_description()) {
      this.page_description = other.page_description;
    }
    if (other.isSetPage_h1()) {
      this.page_h1 = other.page_h1;
    }
    if (other.isSetSize_table()) {
      this.size_table = other.size_table;
    }
    if (other.isSetFriend_link()) {
      this.friend_link = other.friend_link;
    }
    if (other.isSetBrand_select_visible()) {
      this.brand_select_visible = other.brand_select_visible;
    }
    if (other.isSetDelete_flag()) {
      this.delete_flag = other.delete_flag;
    }
    if (other.isSetBrand_name()) {
      this.brand_name = other.brand_name;
    }
    if (other.isSetBrand_no()) {
      this.brand_no = other.brand_no;
    }
    if (other.isSetEnglish_name()) {
      this.english_name = other.english_name;
    }
    if (other.isSetLogo_small_url()) {
      this.logo_small_url = other.logo_small_url;
    }
  }

  public NewCmsBrand deepCopy() {
    return new NewCmsBrand(this);
  }

  @Override
  public void clear() {
    this.brief = null;
    this.detailed_brief = null;
    this.brand_id = null;
    this.page_title = null;
    this.page_keywords = null;
    this.page_description = null;
    this.page_h1 = null;
    this.size_table = null;
    this.friend_link = null;
    this.brand_select_visible = null;
    this.delete_flag = null;
    this.brand_name = null;
    this.brand_no = null;
    this.english_name = null;
    this.logo_small_url = null;
  }

  public String getBrief() {
    return this.brief;
  }

  public NewCmsBrand setBrief(String brief) {
    this.brief = brief;
    return this;
  }

  public void unsetBrief() {
    this.brief = null;
  }

  /** Returns true if field brief is set (has been assigned a value) and false otherwise */
  public boolean isSetBrief() {
    return this.brief != null;
  }

  public void setBriefIsSet(boolean value) {
    if (!value) {
      this.brief = null;
    }
  }

  public String getDetailed_brief() {
    return this.detailed_brief;
  }

  public NewCmsBrand setDetailed_brief(String detailed_brief) {
    this.detailed_brief = detailed_brief;
    return this;
  }

  public void unsetDetailed_brief() {
    this.detailed_brief = null;
  }

  /** Returns true if field detailed_brief is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailed_brief() {
    return this.detailed_brief != null;
  }

  public void setDetailed_briefIsSet(boolean value) {
    if (!value) {
      this.detailed_brief = null;
    }
  }

  public String getBrand_id() {
    return this.brand_id;
  }

  public NewCmsBrand setBrand_id(String brand_id) {
    this.brand_id = brand_id;
    return this;
  }

  public void unsetBrand_id() {
    this.brand_id = null;
  }

  /** Returns true if field brand_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand_id() {
    return this.brand_id != null;
  }

  public void setBrand_idIsSet(boolean value) {
    if (!value) {
      this.brand_id = null;
    }
  }

  public String getPage_title() {
    return this.page_title;
  }

  public NewCmsBrand setPage_title(String page_title) {
    this.page_title = page_title;
    return this;
  }

  public void unsetPage_title() {
    this.page_title = null;
  }

  /** Returns true if field page_title is set (has been assigned a value) and false otherwise */
  public boolean isSetPage_title() {
    return this.page_title != null;
  }

  public void setPage_titleIsSet(boolean value) {
    if (!value) {
      this.page_title = null;
    }
  }

  public String getPage_keywords() {
    return this.page_keywords;
  }

  public NewCmsBrand setPage_keywords(String page_keywords) {
    this.page_keywords = page_keywords;
    return this;
  }

  public void unsetPage_keywords() {
    this.page_keywords = null;
  }

  /** Returns true if field page_keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetPage_keywords() {
    return this.page_keywords != null;
  }

  public void setPage_keywordsIsSet(boolean value) {
    if (!value) {
      this.page_keywords = null;
    }
  }

  public String getPage_description() {
    return this.page_description;
  }

  public NewCmsBrand setPage_description(String page_description) {
    this.page_description = page_description;
    return this;
  }

  public void unsetPage_description() {
    this.page_description = null;
  }

  /** Returns true if field page_description is set (has been assigned a value) and false otherwise */
  public boolean isSetPage_description() {
    return this.page_description != null;
  }

  public void setPage_descriptionIsSet(boolean value) {
    if (!value) {
      this.page_description = null;
    }
  }

  public String getPage_h1() {
    return this.page_h1;
  }

  public NewCmsBrand setPage_h1(String page_h1) {
    this.page_h1 = page_h1;
    return this;
  }

  public void unsetPage_h1() {
    this.page_h1 = null;
  }

  /** Returns true if field page_h1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPage_h1() {
    return this.page_h1 != null;
  }

  public void setPage_h1IsSet(boolean value) {
    if (!value) {
      this.page_h1 = null;
    }
  }

  public String getSize_table() {
    return this.size_table;
  }

  public NewCmsBrand setSize_table(String size_table) {
    this.size_table = size_table;
    return this;
  }

  public void unsetSize_table() {
    this.size_table = null;
  }

  /** Returns true if field size_table is set (has been assigned a value) and false otherwise */
  public boolean isSetSize_table() {
    return this.size_table != null;
  }

  public void setSize_tableIsSet(boolean value) {
    if (!value) {
      this.size_table = null;
    }
  }

  public String getFriend_link() {
    return this.friend_link;
  }

  public NewCmsBrand setFriend_link(String friend_link) {
    this.friend_link = friend_link;
    return this;
  }

  public void unsetFriend_link() {
    this.friend_link = null;
  }

  /** Returns true if field friend_link is set (has been assigned a value) and false otherwise */
  public boolean isSetFriend_link() {
    return this.friend_link != null;
  }

  public void setFriend_linkIsSet(boolean value) {
    if (!value) {
      this.friend_link = null;
    }
  }

  public String getBrand_select_visible() {
    return this.brand_select_visible;
  }

  public NewCmsBrand setBrand_select_visible(String brand_select_visible) {
    this.brand_select_visible = brand_select_visible;
    return this;
  }

  public void unsetBrand_select_visible() {
    this.brand_select_visible = null;
  }

  /** Returns true if field brand_select_visible is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand_select_visible() {
    return this.brand_select_visible != null;
  }

  public void setBrand_select_visibleIsSet(boolean value) {
    if (!value) {
      this.brand_select_visible = null;
    }
  }

  public String getDelete_flag() {
    return this.delete_flag;
  }

  public NewCmsBrand setDelete_flag(String delete_flag) {
    this.delete_flag = delete_flag;
    return this;
  }

  public void unsetDelete_flag() {
    this.delete_flag = null;
  }

  /** Returns true if field delete_flag is set (has been assigned a value) and false otherwise */
  public boolean isSetDelete_flag() {
    return this.delete_flag != null;
  }

  public void setDelete_flagIsSet(boolean value) {
    if (!value) {
      this.delete_flag = null;
    }
  }

  public String getBrand_name() {
    return this.brand_name;
  }

  public NewCmsBrand setBrand_name(String brand_name) {
    this.brand_name = brand_name;
    return this;
  }

  public void unsetBrand_name() {
    this.brand_name = null;
  }

  /** Returns true if field brand_name is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand_name() {
    return this.brand_name != null;
  }

  public void setBrand_nameIsSet(boolean value) {
    if (!value) {
      this.brand_name = null;
    }
  }

  public String getBrand_no() {
    return this.brand_no;
  }

  public NewCmsBrand setBrand_no(String brand_no) {
    this.brand_no = brand_no;
    return this;
  }

  public void unsetBrand_no() {
    this.brand_no = null;
  }

  /** Returns true if field brand_no is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand_no() {
    return this.brand_no != null;
  }

  public void setBrand_noIsSet(boolean value) {
    if (!value) {
      this.brand_no = null;
    }
  }

  public String getEnglish_name() {
    return this.english_name;
  }

  public NewCmsBrand setEnglish_name(String english_name) {
    this.english_name = english_name;
    return this;
  }

  public void unsetEnglish_name() {
    this.english_name = null;
  }

  /** Returns true if field english_name is set (has been assigned a value) and false otherwise */
  public boolean isSetEnglish_name() {
    return this.english_name != null;
  }

  public void setEnglish_nameIsSet(boolean value) {
    if (!value) {
      this.english_name = null;
    }
  }

  public String getLogo_small_url() {
    return this.logo_small_url;
  }

  public NewCmsBrand setLogo_small_url(String logo_small_url) {
    this.logo_small_url = logo_small_url;
    return this;
  }

  public void unsetLogo_small_url() {
    this.logo_small_url = null;
  }

  /** Returns true if field logo_small_url is set (has been assigned a value) and false otherwise */
  public boolean isSetLogo_small_url() {
    return this.logo_small_url != null;
  }

  public void setLogo_small_urlIsSet(boolean value) {
    if (!value) {
      this.logo_small_url = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BRIEF:
      if (value == null) {
        unsetBrief();
      } else {
        setBrief((String)value);
      }
      break;

    case DETAILED_BRIEF:
      if (value == null) {
        unsetDetailed_brief();
      } else {
        setDetailed_brief((String)value);
      }
      break;

    case BRAND_ID:
      if (value == null) {
        unsetBrand_id();
      } else {
        setBrand_id((String)value);
      }
      break;

    case PAGE_TITLE:
      if (value == null) {
        unsetPage_title();
      } else {
        setPage_title((String)value);
      }
      break;

    case PAGE_KEYWORDS:
      if (value == null) {
        unsetPage_keywords();
      } else {
        setPage_keywords((String)value);
      }
      break;

    case PAGE_DESCRIPTION:
      if (value == null) {
        unsetPage_description();
      } else {
        setPage_description((String)value);
      }
      break;

    case PAGE_H1:
      if (value == null) {
        unsetPage_h1();
      } else {
        setPage_h1((String)value);
      }
      break;

    case SIZE_TABLE:
      if (value == null) {
        unsetSize_table();
      } else {
        setSize_table((String)value);
      }
      break;

    case FRIEND_LINK:
      if (value == null) {
        unsetFriend_link();
      } else {
        setFriend_link((String)value);
      }
      break;

    case BRAND_SELECT_VISIBLE:
      if (value == null) {
        unsetBrand_select_visible();
      } else {
        setBrand_select_visible((String)value);
      }
      break;

    case DELETE_FLAG:
      if (value == null) {
        unsetDelete_flag();
      } else {
        setDelete_flag((String)value);
      }
      break;

    case BRAND_NAME:
      if (value == null) {
        unsetBrand_name();
      } else {
        setBrand_name((String)value);
      }
      break;

    case BRAND_NO:
      if (value == null) {
        unsetBrand_no();
      } else {
        setBrand_no((String)value);
      }
      break;

    case ENGLISH_NAME:
      if (value == null) {
        unsetEnglish_name();
      } else {
        setEnglish_name((String)value);
      }
      break;

    case LOGO_SMALL_URL:
      if (value == null) {
        unsetLogo_small_url();
      } else {
        setLogo_small_url((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BRIEF:
      return getBrief();

    case DETAILED_BRIEF:
      return getDetailed_brief();

    case BRAND_ID:
      return getBrand_id();

    case PAGE_TITLE:
      return getPage_title();

    case PAGE_KEYWORDS:
      return getPage_keywords();

    case PAGE_DESCRIPTION:
      return getPage_description();

    case PAGE_H1:
      return getPage_h1();

    case SIZE_TABLE:
      return getSize_table();

    case FRIEND_LINK:
      return getFriend_link();

    case BRAND_SELECT_VISIBLE:
      return getBrand_select_visible();

    case DELETE_FLAG:
      return getDelete_flag();

    case BRAND_NAME:
      return getBrand_name();

    case BRAND_NO:
      return getBrand_no();

    case ENGLISH_NAME:
      return getEnglish_name();

    case LOGO_SMALL_URL:
      return getLogo_small_url();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BRIEF:
      return isSetBrief();
    case DETAILED_BRIEF:
      return isSetDetailed_brief();
    case BRAND_ID:
      return isSetBrand_id();
    case PAGE_TITLE:
      return isSetPage_title();
    case PAGE_KEYWORDS:
      return isSetPage_keywords();
    case PAGE_DESCRIPTION:
      return isSetPage_description();
    case PAGE_H1:
      return isSetPage_h1();
    case SIZE_TABLE:
      return isSetSize_table();
    case FRIEND_LINK:
      return isSetFriend_link();
    case BRAND_SELECT_VISIBLE:
      return isSetBrand_select_visible();
    case DELETE_FLAG:
      return isSetDelete_flag();
    case BRAND_NAME:
      return isSetBrand_name();
    case BRAND_NO:
      return isSetBrand_no();
    case ENGLISH_NAME:
      return isSetEnglish_name();
    case LOGO_SMALL_URL:
      return isSetLogo_small_url();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NewCmsBrand)
      return this.equals((NewCmsBrand)that);
    return false;
  }

  public boolean equals(NewCmsBrand that) {
    if (that == null)
      return false;

    boolean this_present_brief = true && this.isSetBrief();
    boolean that_present_brief = true && that.isSetBrief();
    if (this_present_brief || that_present_brief) {
      if (!(this_present_brief && that_present_brief))
        return false;
      if (!this.brief.equals(that.brief))
        return false;
    }

    boolean this_present_detailed_brief = true && this.isSetDetailed_brief();
    boolean that_present_detailed_brief = true && that.isSetDetailed_brief();
    if (this_present_detailed_brief || that_present_detailed_brief) {
      if (!(this_present_detailed_brief && that_present_detailed_brief))
        return false;
      if (!this.detailed_brief.equals(that.detailed_brief))
        return false;
    }

    boolean this_present_brand_id = true && this.isSetBrand_id();
    boolean that_present_brand_id = true && that.isSetBrand_id();
    if (this_present_brand_id || that_present_brand_id) {
      if (!(this_present_brand_id && that_present_brand_id))
        return false;
      if (!this.brand_id.equals(that.brand_id))
        return false;
    }

    boolean this_present_page_title = true && this.isSetPage_title();
    boolean that_present_page_title = true && that.isSetPage_title();
    if (this_present_page_title || that_present_page_title) {
      if (!(this_present_page_title && that_present_page_title))
        return false;
      if (!this.page_title.equals(that.page_title))
        return false;
    }

    boolean this_present_page_keywords = true && this.isSetPage_keywords();
    boolean that_present_page_keywords = true && that.isSetPage_keywords();
    if (this_present_page_keywords || that_present_page_keywords) {
      if (!(this_present_page_keywords && that_present_page_keywords))
        return false;
      if (!this.page_keywords.equals(that.page_keywords))
        return false;
    }

    boolean this_present_page_description = true && this.isSetPage_description();
    boolean that_present_page_description = true && that.isSetPage_description();
    if (this_present_page_description || that_present_page_description) {
      if (!(this_present_page_description && that_present_page_description))
        return false;
      if (!this.page_description.equals(that.page_description))
        return false;
    }

    boolean this_present_page_h1 = true && this.isSetPage_h1();
    boolean that_present_page_h1 = true && that.isSetPage_h1();
    if (this_present_page_h1 || that_present_page_h1) {
      if (!(this_present_page_h1 && that_present_page_h1))
        return false;
      if (!this.page_h1.equals(that.page_h1))
        return false;
    }

    boolean this_present_size_table = true && this.isSetSize_table();
    boolean that_present_size_table = true && that.isSetSize_table();
    if (this_present_size_table || that_present_size_table) {
      if (!(this_present_size_table && that_present_size_table))
        return false;
      if (!this.size_table.equals(that.size_table))
        return false;
    }

    boolean this_present_friend_link = true && this.isSetFriend_link();
    boolean that_present_friend_link = true && that.isSetFriend_link();
    if (this_present_friend_link || that_present_friend_link) {
      if (!(this_present_friend_link && that_present_friend_link))
        return false;
      if (!this.friend_link.equals(that.friend_link))
        return false;
    }

    boolean this_present_brand_select_visible = true && this.isSetBrand_select_visible();
    boolean that_present_brand_select_visible = true && that.isSetBrand_select_visible();
    if (this_present_brand_select_visible || that_present_brand_select_visible) {
      if (!(this_present_brand_select_visible && that_present_brand_select_visible))
        return false;
      if (!this.brand_select_visible.equals(that.brand_select_visible))
        return false;
    }

    boolean this_present_delete_flag = true && this.isSetDelete_flag();
    boolean that_present_delete_flag = true && that.isSetDelete_flag();
    if (this_present_delete_flag || that_present_delete_flag) {
      if (!(this_present_delete_flag && that_present_delete_flag))
        return false;
      if (!this.delete_flag.equals(that.delete_flag))
        return false;
    }

    boolean this_present_brand_name = true && this.isSetBrand_name();
    boolean that_present_brand_name = true && that.isSetBrand_name();
    if (this_present_brand_name || that_present_brand_name) {
      if (!(this_present_brand_name && that_present_brand_name))
        return false;
      if (!this.brand_name.equals(that.brand_name))
        return false;
    }

    boolean this_present_brand_no = true && this.isSetBrand_no();
    boolean that_present_brand_no = true && that.isSetBrand_no();
    if (this_present_brand_no || that_present_brand_no) {
      if (!(this_present_brand_no && that_present_brand_no))
        return false;
      if (!this.brand_no.equals(that.brand_no))
        return false;
    }

    boolean this_present_english_name = true && this.isSetEnglish_name();
    boolean that_present_english_name = true && that.isSetEnglish_name();
    if (this_present_english_name || that_present_english_name) {
      if (!(this_present_english_name && that_present_english_name))
        return false;
      if (!this.english_name.equals(that.english_name))
        return false;
    }

    boolean this_present_logo_small_url = true && this.isSetLogo_small_url();
    boolean that_present_logo_small_url = true && that.isSetLogo_small_url();
    if (this_present_logo_small_url || that_present_logo_small_url) {
      if (!(this_present_logo_small_url && that_present_logo_small_url))
        return false;
      if (!this.logo_small_url.equals(that.logo_small_url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(NewCmsBrand other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrief()).compareTo(other.isSetBrief());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrief()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brief, other.brief);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailed_brief()).compareTo(other.isSetDetailed_brief());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailed_brief()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailed_brief, other.detailed_brief);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand_id()).compareTo(other.isSetBrand_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand_id, other.brand_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage_title()).compareTo(other.isSetPage_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_title, other.page_title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage_keywords()).compareTo(other.isSetPage_keywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage_keywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_keywords, other.page_keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage_description()).compareTo(other.isSetPage_description());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage_description()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_description, other.page_description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage_h1()).compareTo(other.isSetPage_h1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage_h1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page_h1, other.page_h1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize_table()).compareTo(other.isSetSize_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size_table, other.size_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFriend_link()).compareTo(other.isSetFriend_link());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriend_link()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friend_link, other.friend_link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand_select_visible()).compareTo(other.isSetBrand_select_visible());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand_select_visible()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand_select_visible, other.brand_select_visible);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelete_flag()).compareTo(other.isSetDelete_flag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelete_flag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delete_flag, other.delete_flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand_name()).compareTo(other.isSetBrand_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand_name, other.brand_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand_no()).compareTo(other.isSetBrand_no());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand_no()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand_no, other.brand_no);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnglish_name()).compareTo(other.isSetEnglish_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnglish_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.english_name, other.english_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogo_small_url()).compareTo(other.isSetLogo_small_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogo_small_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logo_small_url, other.logo_small_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NewCmsBrand(");
    boolean first = true;

    sb.append("brief:");
    if (this.brief == null) {
      sb.append("null");
    } else {
      sb.append(this.brief);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailed_brief:");
    if (this.detailed_brief == null) {
      sb.append("null");
    } else {
      sb.append(this.detailed_brief);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brand_id:");
    if (this.brand_id == null) {
      sb.append("null");
    } else {
      sb.append(this.brand_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page_title:");
    if (this.page_title == null) {
      sb.append("null");
    } else {
      sb.append(this.page_title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page_keywords:");
    if (this.page_keywords == null) {
      sb.append("null");
    } else {
      sb.append(this.page_keywords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page_description:");
    if (this.page_description == null) {
      sb.append("null");
    } else {
      sb.append(this.page_description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page_h1:");
    if (this.page_h1 == null) {
      sb.append("null");
    } else {
      sb.append(this.page_h1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size_table:");
    if (this.size_table == null) {
      sb.append("null");
    } else {
      sb.append(this.size_table);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("friend_link:");
    if (this.friend_link == null) {
      sb.append("null");
    } else {
      sb.append(this.friend_link);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brand_select_visible:");
    if (this.brand_select_visible == null) {
      sb.append("null");
    } else {
      sb.append(this.brand_select_visible);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("delete_flag:");
    if (this.delete_flag == null) {
      sb.append("null");
    } else {
      sb.append(this.delete_flag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brand_name:");
    if (this.brand_name == null) {
      sb.append("null");
    } else {
      sb.append(this.brand_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brand_no:");
    if (this.brand_no == null) {
      sb.append("null");
    } else {
      sb.append(this.brand_no);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("english_name:");
    if (this.english_name == null) {
      sb.append("null");
    } else {
      sb.append(this.english_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logo_small_url:");
    if (this.logo_small_url == null) {
      sb.append("null");
    } else {
      sb.append(this.logo_small_url);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NewCmsBrandStandardSchemeFactory implements SchemeFactory {
    public NewCmsBrandStandardScheme getScheme() {
      return new NewCmsBrandStandardScheme();
    }
  }

  private static class NewCmsBrandStandardScheme extends StandardScheme<NewCmsBrand> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NewCmsBrand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BRIEF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brief = iprot.readString();
              struct.setBriefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DETAILED_BRIEF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailed_brief = iprot.readString();
              struct.setDetailed_briefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BRAND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brand_id = iprot.readString();
              struct.setBrand_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.page_title = iprot.readString();
              struct.setPage_titleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAGE_KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.page_keywords = iprot.readString();
              struct.setPage_keywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAGE_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.page_description = iprot.readString();
              struct.setPage_descriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE_H1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.page_h1 = iprot.readString();
              struct.setPage_h1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SIZE_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.size_table = iprot.readString();
              struct.setSize_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FRIEND_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.friend_link = iprot.readString();
              struct.setFriend_linkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BRAND_SELECT_VISIBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brand_select_visible = iprot.readString();
              struct.setBrand_select_visibleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DELETE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.delete_flag = iprot.readString();
              struct.setDelete_flagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BRAND_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brand_name = iprot.readString();
              struct.setBrand_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BRAND_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brand_no = iprot.readString();
              struct.setBrand_noIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ENGLISH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.english_name = iprot.readString();
              struct.setEnglish_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOGO_SMALL_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logo_small_url = iprot.readString();
              struct.setLogo_small_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NewCmsBrand struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brief != null) {
        oprot.writeFieldBegin(BRIEF_FIELD_DESC);
        oprot.writeString(struct.brief);
        oprot.writeFieldEnd();
      }
      if (struct.detailed_brief != null) {
        oprot.writeFieldBegin(DETAILED_BRIEF_FIELD_DESC);
        oprot.writeString(struct.detailed_brief);
        oprot.writeFieldEnd();
      }
      if (struct.brand_id != null) {
        oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
        oprot.writeString(struct.brand_id);
        oprot.writeFieldEnd();
      }
      if (struct.page_title != null) {
        oprot.writeFieldBegin(PAGE_TITLE_FIELD_DESC);
        oprot.writeString(struct.page_title);
        oprot.writeFieldEnd();
      }
      if (struct.page_keywords != null) {
        oprot.writeFieldBegin(PAGE_KEYWORDS_FIELD_DESC);
        oprot.writeString(struct.page_keywords);
        oprot.writeFieldEnd();
      }
      if (struct.page_description != null) {
        oprot.writeFieldBegin(PAGE_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.page_description);
        oprot.writeFieldEnd();
      }
      if (struct.page_h1 != null) {
        oprot.writeFieldBegin(PAGE_H1_FIELD_DESC);
        oprot.writeString(struct.page_h1);
        oprot.writeFieldEnd();
      }
      if (struct.size_table != null) {
        oprot.writeFieldBegin(SIZE_TABLE_FIELD_DESC);
        oprot.writeString(struct.size_table);
        oprot.writeFieldEnd();
      }
      if (struct.friend_link != null) {
        oprot.writeFieldBegin(FRIEND_LINK_FIELD_DESC);
        oprot.writeString(struct.friend_link);
        oprot.writeFieldEnd();
      }
      if (struct.brand_select_visible != null) {
        oprot.writeFieldBegin(BRAND_SELECT_VISIBLE_FIELD_DESC);
        oprot.writeString(struct.brand_select_visible);
        oprot.writeFieldEnd();
      }
      if (struct.delete_flag != null) {
        oprot.writeFieldBegin(DELETE_FLAG_FIELD_DESC);
        oprot.writeString(struct.delete_flag);
        oprot.writeFieldEnd();
      }
      if (struct.brand_name != null) {
        oprot.writeFieldBegin(BRAND_NAME_FIELD_DESC);
        oprot.writeString(struct.brand_name);
        oprot.writeFieldEnd();
      }
      if (struct.brand_no != null) {
        oprot.writeFieldBegin(BRAND_NO_FIELD_DESC);
        oprot.writeString(struct.brand_no);
        oprot.writeFieldEnd();
      }
      if (struct.english_name != null) {
        oprot.writeFieldBegin(ENGLISH_NAME_FIELD_DESC);
        oprot.writeString(struct.english_name);
        oprot.writeFieldEnd();
      }
      if (struct.logo_small_url != null) {
        oprot.writeFieldBegin(LOGO_SMALL_URL_FIELD_DESC);
        oprot.writeString(struct.logo_small_url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NewCmsBrandTupleSchemeFactory implements SchemeFactory {
    public NewCmsBrandTupleScheme getScheme() {
      return new NewCmsBrandTupleScheme();
    }
  }

  private static class NewCmsBrandTupleScheme extends TupleScheme<NewCmsBrand> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NewCmsBrand struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrief()) {
        optionals.set(0);
      }
      if (struct.isSetDetailed_brief()) {
        optionals.set(1);
      }
      if (struct.isSetBrand_id()) {
        optionals.set(2);
      }
      if (struct.isSetPage_title()) {
        optionals.set(3);
      }
      if (struct.isSetPage_keywords()) {
        optionals.set(4);
      }
      if (struct.isSetPage_description()) {
        optionals.set(5);
      }
      if (struct.isSetPage_h1()) {
        optionals.set(6);
      }
      if (struct.isSetSize_table()) {
        optionals.set(7);
      }
      if (struct.isSetFriend_link()) {
        optionals.set(8);
      }
      if (struct.isSetBrand_select_visible()) {
        optionals.set(9);
      }
      if (struct.isSetDelete_flag()) {
        optionals.set(10);
      }
      if (struct.isSetBrand_name()) {
        optionals.set(11);
      }
      if (struct.isSetBrand_no()) {
        optionals.set(12);
      }
      if (struct.isSetEnglish_name()) {
        optionals.set(13);
      }
      if (struct.isSetLogo_small_url()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetBrief()) {
        oprot.writeString(struct.brief);
      }
      if (struct.isSetDetailed_brief()) {
        oprot.writeString(struct.detailed_brief);
      }
      if (struct.isSetBrand_id()) {
        oprot.writeString(struct.brand_id);
      }
      if (struct.isSetPage_title()) {
        oprot.writeString(struct.page_title);
      }
      if (struct.isSetPage_keywords()) {
        oprot.writeString(struct.page_keywords);
      }
      if (struct.isSetPage_description()) {
        oprot.writeString(struct.page_description);
      }
      if (struct.isSetPage_h1()) {
        oprot.writeString(struct.page_h1);
      }
      if (struct.isSetSize_table()) {
        oprot.writeString(struct.size_table);
      }
      if (struct.isSetFriend_link()) {
        oprot.writeString(struct.friend_link);
      }
      if (struct.isSetBrand_select_visible()) {
        oprot.writeString(struct.brand_select_visible);
      }
      if (struct.isSetDelete_flag()) {
        oprot.writeString(struct.delete_flag);
      }
      if (struct.isSetBrand_name()) {
        oprot.writeString(struct.brand_name);
      }
      if (struct.isSetBrand_no()) {
        oprot.writeString(struct.brand_no);
      }
      if (struct.isSetEnglish_name()) {
        oprot.writeString(struct.english_name);
      }
      if (struct.isSetLogo_small_url()) {
        oprot.writeString(struct.logo_small_url);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NewCmsBrand struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.brief = iprot.readString();
        struct.setBriefIsSet(true);
      }
      if (incoming.get(1)) {
        struct.detailed_brief = iprot.readString();
        struct.setDetailed_briefIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brand_id = iprot.readString();
        struct.setBrand_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.page_title = iprot.readString();
        struct.setPage_titleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.page_keywords = iprot.readString();
        struct.setPage_keywordsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.page_description = iprot.readString();
        struct.setPage_descriptionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.page_h1 = iprot.readString();
        struct.setPage_h1IsSet(true);
      }
      if (incoming.get(7)) {
        struct.size_table = iprot.readString();
        struct.setSize_tableIsSet(true);
      }
      if (incoming.get(8)) {
        struct.friend_link = iprot.readString();
        struct.setFriend_linkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.brand_select_visible = iprot.readString();
        struct.setBrand_select_visibleIsSet(true);
      }
      if (incoming.get(10)) {
        struct.delete_flag = iprot.readString();
        struct.setDelete_flagIsSet(true);
      }
      if (incoming.get(11)) {
        struct.brand_name = iprot.readString();
        struct.setBrand_nameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.brand_no = iprot.readString();
        struct.setBrand_noIsSet(true);
      }
      if (incoming.get(13)) {
        struct.english_name = iprot.readString();
        struct.setEnglish_nameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.logo_small_url = iprot.readString();
        struct.setLogo_small_urlIsSet(true);
      }
    }
  }

}

