/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yougou.kaidian.commodity.thrift;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CmsApi {

  public interface Iface {

    public boolean checkExpireTopic(String topicId) throws org.apache.thrift.TException;

    public NewCmsBrand getCmsBrandByCommodityBrandId(String brandId) throws org.apache.thrift.TException;

    public CmsPageResultsInfos getAllCmsBrands(Map<String,String> option) throws org.apache.thrift.TException;

    public void generateOutletsTopic() throws org.apache.thrift.TException;

    public int getLeftTime(String outletsTopicId) throws org.apache.thrift.TException;

    public void batchBuildCommodityPage() throws org.apache.thrift.TException;

    public List<Map<String,String>> getLeftTimeForSeckillCommodity() throws org.apache.thrift.TException;

    public int buildYmcPages(String brandNo, String cateStructName, String merchantCode) throws org.apache.thrift.TException;

    public int buildYmcPagesByParams(Map<String,String> option) throws org.apache.thrift.TException;

    public Map<String,List<Map<String,String>>> getBrandKeywords(Map<String,String> option) throws org.apache.thrift.TException;

    public Map<String,Map<String,List<Map<String,String>>>> getAllBrandKeywords(Map<String,String> option) throws org.apache.thrift.TException;

    public Map<String,List<Map<String,String>>> getCategoryKeywords(Map<String,String> option) throws org.apache.thrift.TException;

    public Map<String,List<Map<String,String>>> getAllCategoryKeywords(Map<String,String> option) throws org.apache.thrift.TException;

    public CmsPageResultsInfos getAllSeoCategoryUrls(Map<String,String> option) throws org.apache.thrift.TException;

    public CmsPageResultsInfos getAllSeoCategoryInfos(Map<String,String> option) throws org.apache.thrift.TException;

    public boolean buildCommodityPageByNo(String commodityNo) throws org.apache.thrift.TException;

    public List<Map<String,String>> getRandomSeoKeywords(int num) throws org.apache.thrift.TException;

    public void CmsBatchBuildPage(Map<String,String> option) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void checkExpireTopic(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCmsBrandByCommodityBrandId(String brandId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllCmsBrands(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void generateOutletsTopic(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLeftTime(String outletsTopicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchBuildCommodityPage(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLeftTimeForSeckillCommodity(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void buildYmcPages(String brandNo, String cateStructName, String merchantCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void buildYmcPagesByParams(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBrandKeywords(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllBrandKeywords(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCategoryKeywords(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllCategoryKeywords(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllSeoCategoryUrls(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllSeoCategoryInfos(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void buildCommodityPageByNo(String commodityNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRandomSeoKeywords(int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CmsBatchBuildPage(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean checkExpireTopic(String topicId) throws org.apache.thrift.TException
    {
      send_checkExpireTopic(topicId);
      return recv_checkExpireTopic();
    }

    public void send_checkExpireTopic(String topicId) throws org.apache.thrift.TException
    {
      checkExpireTopic_args args = new checkExpireTopic_args();
      args.setTopicId(topicId);
      sendBase("checkExpireTopic", args);
    }

    public boolean recv_checkExpireTopic() throws org.apache.thrift.TException
    {
      checkExpireTopic_result result = new checkExpireTopic_result();
      receiveBase(result, "checkExpireTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkExpireTopic failed: unknown result");
    }

    public NewCmsBrand getCmsBrandByCommodityBrandId(String brandId) throws org.apache.thrift.TException
    {
      send_getCmsBrandByCommodityBrandId(brandId);
      return recv_getCmsBrandByCommodityBrandId();
    }

    public void send_getCmsBrandByCommodityBrandId(String brandId) throws org.apache.thrift.TException
    {
      getCmsBrandByCommodityBrandId_args args = new getCmsBrandByCommodityBrandId_args();
      args.setBrandId(brandId);
      sendBase("getCmsBrandByCommodityBrandId", args);
    }

    public NewCmsBrand recv_getCmsBrandByCommodityBrandId() throws org.apache.thrift.TException
    {
      getCmsBrandByCommodityBrandId_result result = new getCmsBrandByCommodityBrandId_result();
      receiveBase(result, "getCmsBrandByCommodityBrandId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCmsBrandByCommodityBrandId failed: unknown result");
    }

    public CmsPageResultsInfos getAllCmsBrands(Map<String,String> option) throws org.apache.thrift.TException
    {
      send_getAllCmsBrands(option);
      return recv_getAllCmsBrands();
    }

    public void send_getAllCmsBrands(Map<String,String> option) throws org.apache.thrift.TException
    {
      getAllCmsBrands_args args = new getAllCmsBrands_args();
      args.setOption(option);
      sendBase("getAllCmsBrands", args);
    }

    public CmsPageResultsInfos recv_getAllCmsBrands() throws org.apache.thrift.TException
    {
      getAllCmsBrands_result result = new getAllCmsBrands_result();
      receiveBase(result, "getAllCmsBrands");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllCmsBrands failed: unknown result");
    }

    public void generateOutletsTopic() throws org.apache.thrift.TException
    {
      send_generateOutletsTopic();
      recv_generateOutletsTopic();
    }

    public void send_generateOutletsTopic() throws org.apache.thrift.TException
    {
      generateOutletsTopic_args args = new generateOutletsTopic_args();
      sendBase("generateOutletsTopic", args);
    }

    public void recv_generateOutletsTopic() throws org.apache.thrift.TException
    {
      generateOutletsTopic_result result = new generateOutletsTopic_result();
      receiveBase(result, "generateOutletsTopic");
      return;
    }

    public int getLeftTime(String outletsTopicId) throws org.apache.thrift.TException
    {
      send_getLeftTime(outletsTopicId);
      return recv_getLeftTime();
    }

    public void send_getLeftTime(String outletsTopicId) throws org.apache.thrift.TException
    {
      getLeftTime_args args = new getLeftTime_args();
      args.setOutletsTopicId(outletsTopicId);
      sendBase("getLeftTime", args);
    }

    public int recv_getLeftTime() throws org.apache.thrift.TException
    {
      getLeftTime_result result = new getLeftTime_result();
      receiveBase(result, "getLeftTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLeftTime failed: unknown result");
    }

    public void batchBuildCommodityPage() throws org.apache.thrift.TException
    {
      send_batchBuildCommodityPage();
      recv_batchBuildCommodityPage();
    }

    public void send_batchBuildCommodityPage() throws org.apache.thrift.TException
    {
      batchBuildCommodityPage_args args = new batchBuildCommodityPage_args();
      sendBase("batchBuildCommodityPage", args);
    }

    public void recv_batchBuildCommodityPage() throws org.apache.thrift.TException
    {
      batchBuildCommodityPage_result result = new batchBuildCommodityPage_result();
      receiveBase(result, "batchBuildCommodityPage");
      return;
    }

    public List<Map<String,String>> getLeftTimeForSeckillCommodity() throws org.apache.thrift.TException
    {
      send_getLeftTimeForSeckillCommodity();
      return recv_getLeftTimeForSeckillCommodity();
    }

    public void send_getLeftTimeForSeckillCommodity() throws org.apache.thrift.TException
    {
      getLeftTimeForSeckillCommodity_args args = new getLeftTimeForSeckillCommodity_args();
      sendBase("getLeftTimeForSeckillCommodity", args);
    }

    public List<Map<String,String>> recv_getLeftTimeForSeckillCommodity() throws org.apache.thrift.TException
    {
      getLeftTimeForSeckillCommodity_result result = new getLeftTimeForSeckillCommodity_result();
      receiveBase(result, "getLeftTimeForSeckillCommodity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLeftTimeForSeckillCommodity failed: unknown result");
    }

    public int buildYmcPages(String brandNo, String cateStructName, String merchantCode) throws org.apache.thrift.TException
    {
      send_buildYmcPages(brandNo, cateStructName, merchantCode);
      return recv_buildYmcPages();
    }

    public void send_buildYmcPages(String brandNo, String cateStructName, String merchantCode) throws org.apache.thrift.TException
    {
      buildYmcPages_args args = new buildYmcPages_args();
      args.setBrandNo(brandNo);
      args.setCateStructName(cateStructName);
      args.setMerchantCode(merchantCode);
      sendBase("buildYmcPages", args);
    }

    public int recv_buildYmcPages() throws org.apache.thrift.TException
    {
      buildYmcPages_result result = new buildYmcPages_result();
      receiveBase(result, "buildYmcPages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "buildYmcPages failed: unknown result");
    }

    public int buildYmcPagesByParams(Map<String,String> option) throws org.apache.thrift.TException
    {
      send_buildYmcPagesByParams(option);
      return recv_buildYmcPagesByParams();
    }

    public void send_buildYmcPagesByParams(Map<String,String> option) throws org.apache.thrift.TException
    {
      buildYmcPagesByParams_args args = new buildYmcPagesByParams_args();
      args.setOption(option);
      sendBase("buildYmcPagesByParams", args);
    }

    public int recv_buildYmcPagesByParams() throws org.apache.thrift.TException
    {
      buildYmcPagesByParams_result result = new buildYmcPagesByParams_result();
      receiveBase(result, "buildYmcPagesByParams");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "buildYmcPagesByParams failed: unknown result");
    }

    public Map<String,List<Map<String,String>>> getBrandKeywords(Map<String,String> option) throws org.apache.thrift.TException
    {
      send_getBrandKeywords(option);
      return recv_getBrandKeywords();
    }

    public void send_getBrandKeywords(Map<String,String> option) throws org.apache.thrift.TException
    {
      getBrandKeywords_args args = new getBrandKeywords_args();
      args.setOption(option);
      sendBase("getBrandKeywords", args);
    }

    public Map<String,List<Map<String,String>>> recv_getBrandKeywords() throws org.apache.thrift.TException
    {
      getBrandKeywords_result result = new getBrandKeywords_result();
      receiveBase(result, "getBrandKeywords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBrandKeywords failed: unknown result");
    }

    public Map<String,Map<String,List<Map<String,String>>>> getAllBrandKeywords(Map<String,String> option) throws org.apache.thrift.TException
    {
      send_getAllBrandKeywords(option);
      return recv_getAllBrandKeywords();
    }

    public void send_getAllBrandKeywords(Map<String,String> option) throws org.apache.thrift.TException
    {
      getAllBrandKeywords_args args = new getAllBrandKeywords_args();
      args.setOption(option);
      sendBase("getAllBrandKeywords", args);
    }

    public Map<String,Map<String,List<Map<String,String>>>> recv_getAllBrandKeywords() throws org.apache.thrift.TException
    {
      getAllBrandKeywords_result result = new getAllBrandKeywords_result();
      receiveBase(result, "getAllBrandKeywords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllBrandKeywords failed: unknown result");
    }

    public Map<String,List<Map<String,String>>> getCategoryKeywords(Map<String,String> option) throws org.apache.thrift.TException
    {
      send_getCategoryKeywords(option);
      return recv_getCategoryKeywords();
    }

    public void send_getCategoryKeywords(Map<String,String> option) throws org.apache.thrift.TException
    {
      getCategoryKeywords_args args = new getCategoryKeywords_args();
      args.setOption(option);
      sendBase("getCategoryKeywords", args);
    }

    public Map<String,List<Map<String,String>>> recv_getCategoryKeywords() throws org.apache.thrift.TException
    {
      getCategoryKeywords_result result = new getCategoryKeywords_result();
      receiveBase(result, "getCategoryKeywords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCategoryKeywords failed: unknown result");
    }

    public Map<String,List<Map<String,String>>> getAllCategoryKeywords(Map<String,String> option) throws org.apache.thrift.TException
    {
      send_getAllCategoryKeywords(option);
      return recv_getAllCategoryKeywords();
    }

    public void send_getAllCategoryKeywords(Map<String,String> option) throws org.apache.thrift.TException
    {
      getAllCategoryKeywords_args args = new getAllCategoryKeywords_args();
      args.setOption(option);
      sendBase("getAllCategoryKeywords", args);
    }

    public Map<String,List<Map<String,String>>> recv_getAllCategoryKeywords() throws org.apache.thrift.TException
    {
      getAllCategoryKeywords_result result = new getAllCategoryKeywords_result();
      receiveBase(result, "getAllCategoryKeywords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllCategoryKeywords failed: unknown result");
    }

    public CmsPageResultsInfos getAllSeoCategoryUrls(Map<String,String> option) throws org.apache.thrift.TException
    {
      send_getAllSeoCategoryUrls(option);
      return recv_getAllSeoCategoryUrls();
    }

    public void send_getAllSeoCategoryUrls(Map<String,String> option) throws org.apache.thrift.TException
    {
      getAllSeoCategoryUrls_args args = new getAllSeoCategoryUrls_args();
      args.setOption(option);
      sendBase("getAllSeoCategoryUrls", args);
    }

    public CmsPageResultsInfos recv_getAllSeoCategoryUrls() throws org.apache.thrift.TException
    {
      getAllSeoCategoryUrls_result result = new getAllSeoCategoryUrls_result();
      receiveBase(result, "getAllSeoCategoryUrls");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllSeoCategoryUrls failed: unknown result");
    }

    public CmsPageResultsInfos getAllSeoCategoryInfos(Map<String,String> option) throws org.apache.thrift.TException
    {
      send_getAllSeoCategoryInfos(option);
      return recv_getAllSeoCategoryInfos();
    }

    public void send_getAllSeoCategoryInfos(Map<String,String> option) throws org.apache.thrift.TException
    {
      getAllSeoCategoryInfos_args args = new getAllSeoCategoryInfos_args();
      args.setOption(option);
      sendBase("getAllSeoCategoryInfos", args);
    }

    public CmsPageResultsInfos recv_getAllSeoCategoryInfos() throws org.apache.thrift.TException
    {
      getAllSeoCategoryInfos_result result = new getAllSeoCategoryInfos_result();
      receiveBase(result, "getAllSeoCategoryInfos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllSeoCategoryInfos failed: unknown result");
    }

    public boolean buildCommodityPageByNo(String commodityNo) throws org.apache.thrift.TException
    {
      send_buildCommodityPageByNo(commodityNo);
      return recv_buildCommodityPageByNo();
    }

    public void send_buildCommodityPageByNo(String commodityNo) throws org.apache.thrift.TException
    {
      buildCommodityPageByNo_args args = new buildCommodityPageByNo_args();
      args.setCommodityNo(commodityNo);
      sendBase("buildCommodityPageByNo", args);
    }

    public boolean recv_buildCommodityPageByNo() throws org.apache.thrift.TException
    {
      buildCommodityPageByNo_result result = new buildCommodityPageByNo_result();
      receiveBase(result, "buildCommodityPageByNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "buildCommodityPageByNo failed: unknown result");
    }

    public List<Map<String,String>> getRandomSeoKeywords(int num) throws org.apache.thrift.TException
    {
      send_getRandomSeoKeywords(num);
      return recv_getRandomSeoKeywords();
    }

    public void send_getRandomSeoKeywords(int num) throws org.apache.thrift.TException
    {
      getRandomSeoKeywords_args args = new getRandomSeoKeywords_args();
      args.setNum(num);
      sendBase("getRandomSeoKeywords", args);
    }

    public List<Map<String,String>> recv_getRandomSeoKeywords() throws org.apache.thrift.TException
    {
      getRandomSeoKeywords_result result = new getRandomSeoKeywords_result();
      receiveBase(result, "getRandomSeoKeywords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRandomSeoKeywords failed: unknown result");
    }

    public void CmsBatchBuildPage(Map<String,String> option) throws org.apache.thrift.TException
    {
      send_CmsBatchBuildPage(option);
      recv_CmsBatchBuildPage();
    }

    public void send_CmsBatchBuildPage(Map<String,String> option) throws org.apache.thrift.TException
    {
      CmsBatchBuildPage_args args = new CmsBatchBuildPage_args();
      args.setOption(option);
      sendBase("CmsBatchBuildPage", args);
    }

    public void recv_CmsBatchBuildPage() throws org.apache.thrift.TException
    {
      CmsBatchBuildPage_result result = new CmsBatchBuildPage_result();
      receiveBase(result, "CmsBatchBuildPage");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void checkExpireTopic(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkExpireTopic_call method_call = new checkExpireTopic_call(topicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkExpireTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String topicId;
      public checkExpireTopic_call(String topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkExpireTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkExpireTopic_args args = new checkExpireTopic_args();
        args.setTopicId(topicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkExpireTopic();
      }
    }

    public void getCmsBrandByCommodityBrandId(String brandId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCmsBrandByCommodityBrandId_call method_call = new getCmsBrandByCommodityBrandId_call(brandId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCmsBrandByCommodityBrandId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String brandId;
      public getCmsBrandByCommodityBrandId_call(String brandId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.brandId = brandId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCmsBrandByCommodityBrandId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCmsBrandByCommodityBrandId_args args = new getCmsBrandByCommodityBrandId_args();
        args.setBrandId(brandId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NewCmsBrand getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCmsBrandByCommodityBrandId();
      }
    }

    public void getAllCmsBrands(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllCmsBrands_call method_call = new getAllCmsBrands_call(option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllCmsBrands_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> option;
      public getAllCmsBrands_call(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllCmsBrands", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllCmsBrands_args args = new getAllCmsBrands_args();
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CmsPageResultsInfos getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllCmsBrands();
      }
    }

    public void generateOutletsTopic(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateOutletsTopic_call method_call = new generateOutletsTopic_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateOutletsTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      public generateOutletsTopic_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateOutletsTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateOutletsTopic_args args = new generateOutletsTopic_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_generateOutletsTopic();
      }
    }

    public void getLeftTime(String outletsTopicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLeftTime_call method_call = new getLeftTime_call(outletsTopicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLeftTime_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String outletsTopicId;
      public getLeftTime_call(String outletsTopicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletsTopicId = outletsTopicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLeftTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLeftTime_args args = new getLeftTime_args();
        args.setOutletsTopicId(outletsTopicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLeftTime();
      }
    }

    public void batchBuildCommodityPage(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchBuildCommodityPage_call method_call = new batchBuildCommodityPage_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchBuildCommodityPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      public batchBuildCommodityPage_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchBuildCommodityPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchBuildCommodityPage_args args = new batchBuildCommodityPage_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_batchBuildCommodityPage();
      }
    }

    public void getLeftTimeForSeckillCommodity(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLeftTimeForSeckillCommodity_call method_call = new getLeftTimeForSeckillCommodity_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLeftTimeForSeckillCommodity_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getLeftTimeForSeckillCommodity_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLeftTimeForSeckillCommodity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLeftTimeForSeckillCommodity_args args = new getLeftTimeForSeckillCommodity_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLeftTimeForSeckillCommodity();
      }
    }

    public void buildYmcPages(String brandNo, String cateStructName, String merchantCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      buildYmcPages_call method_call = new buildYmcPages_call(brandNo, cateStructName, merchantCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class buildYmcPages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String brandNo;
      private String cateStructName;
      private String merchantCode;
      public buildYmcPages_call(String brandNo, String cateStructName, String merchantCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.brandNo = brandNo;
        this.cateStructName = cateStructName;
        this.merchantCode = merchantCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("buildYmcPages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        buildYmcPages_args args = new buildYmcPages_args();
        args.setBrandNo(brandNo);
        args.setCateStructName(cateStructName);
        args.setMerchantCode(merchantCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_buildYmcPages();
      }
    }

    public void buildYmcPagesByParams(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      buildYmcPagesByParams_call method_call = new buildYmcPagesByParams_call(option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class buildYmcPagesByParams_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> option;
      public buildYmcPagesByParams_call(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("buildYmcPagesByParams", org.apache.thrift.protocol.TMessageType.CALL, 0));
        buildYmcPagesByParams_args args = new buildYmcPagesByParams_args();
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_buildYmcPagesByParams();
      }
    }

    public void getBrandKeywords(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBrandKeywords_call method_call = new getBrandKeywords_call(option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBrandKeywords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> option;
      public getBrandKeywords_call(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBrandKeywords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBrandKeywords_args args = new getBrandKeywords_args();
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<Map<String,String>>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBrandKeywords();
      }
    }

    public void getAllBrandKeywords(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllBrandKeywords_call method_call = new getAllBrandKeywords_call(option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllBrandKeywords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> option;
      public getAllBrandKeywords_call(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllBrandKeywords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllBrandKeywords_args args = new getAllBrandKeywords_args();
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<String,List<Map<String,String>>>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllBrandKeywords();
      }
    }

    public void getCategoryKeywords(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCategoryKeywords_call method_call = new getCategoryKeywords_call(option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCategoryKeywords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> option;
      public getCategoryKeywords_call(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategoryKeywords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCategoryKeywords_args args = new getCategoryKeywords_args();
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<Map<String,String>>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCategoryKeywords();
      }
    }

    public void getAllCategoryKeywords(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllCategoryKeywords_call method_call = new getAllCategoryKeywords_call(option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllCategoryKeywords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> option;
      public getAllCategoryKeywords_call(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllCategoryKeywords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllCategoryKeywords_args args = new getAllCategoryKeywords_args();
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<Map<String,String>>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllCategoryKeywords();
      }
    }

    public void getAllSeoCategoryUrls(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllSeoCategoryUrls_call method_call = new getAllSeoCategoryUrls_call(option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllSeoCategoryUrls_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> option;
      public getAllSeoCategoryUrls_call(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllSeoCategoryUrls", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllSeoCategoryUrls_args args = new getAllSeoCategoryUrls_args();
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CmsPageResultsInfos getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllSeoCategoryUrls();
      }
    }

    public void getAllSeoCategoryInfos(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllSeoCategoryInfos_call method_call = new getAllSeoCategoryInfos_call(option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllSeoCategoryInfos_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> option;
      public getAllSeoCategoryInfos_call(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllSeoCategoryInfos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllSeoCategoryInfos_args args = new getAllSeoCategoryInfos_args();
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CmsPageResultsInfos getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllSeoCategoryInfos();
      }
    }

    public void buildCommodityPageByNo(String commodityNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      buildCommodityPageByNo_call method_call = new buildCommodityPageByNo_call(commodityNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class buildCommodityPageByNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String commodityNo;
      public buildCommodityPageByNo_call(String commodityNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commodityNo = commodityNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("buildCommodityPageByNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        buildCommodityPageByNo_args args = new buildCommodityPageByNo_args();
        args.setCommodityNo(commodityNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_buildCommodityPageByNo();
      }
    }

    public void getRandomSeoKeywords(int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRandomSeoKeywords_call method_call = new getRandomSeoKeywords_call(num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRandomSeoKeywords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int num;
      public getRandomSeoKeywords_call(int num, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.num = num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRandomSeoKeywords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRandomSeoKeywords_args args = new getRandomSeoKeywords_args();
        args.setNum(num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRandomSeoKeywords();
      }
    }

    public void CmsBatchBuildPage(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CmsBatchBuildPage_call method_call = new CmsBatchBuildPage_call(option, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CmsBatchBuildPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> option;
      public CmsBatchBuildPage_call(Map<String,String> option, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.option = option;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CmsBatchBuildPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CmsBatchBuildPage_args args = new CmsBatchBuildPage_args();
        args.setOption(option);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CmsBatchBuildPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("checkExpireTopic", new checkExpireTopic());
      processMap.put("getCmsBrandByCommodityBrandId", new getCmsBrandByCommodityBrandId());
      processMap.put("getAllCmsBrands", new getAllCmsBrands());
      processMap.put("generateOutletsTopic", new generateOutletsTopic());
      processMap.put("getLeftTime", new getLeftTime());
      processMap.put("batchBuildCommodityPage", new batchBuildCommodityPage());
      processMap.put("getLeftTimeForSeckillCommodity", new getLeftTimeForSeckillCommodity());
      processMap.put("buildYmcPages", new buildYmcPages());
      processMap.put("buildYmcPagesByParams", new buildYmcPagesByParams());
      processMap.put("getBrandKeywords", new getBrandKeywords());
      processMap.put("getAllBrandKeywords", new getAllBrandKeywords());
      processMap.put("getCategoryKeywords", new getCategoryKeywords());
      processMap.put("getAllCategoryKeywords", new getAllCategoryKeywords());
      processMap.put("getAllSeoCategoryUrls", new getAllSeoCategoryUrls());
      processMap.put("getAllSeoCategoryInfos", new getAllSeoCategoryInfos());
      processMap.put("buildCommodityPageByNo", new buildCommodityPageByNo());
      processMap.put("getRandomSeoKeywords", new getRandomSeoKeywords());
      processMap.put("CmsBatchBuildPage", new CmsBatchBuildPage());
      return processMap;
    }

    public static class checkExpireTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkExpireTopic_args> {
      public checkExpireTopic() {
        super("checkExpireTopic");
      }

      public checkExpireTopic_args getEmptyArgsInstance() {
        return new checkExpireTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkExpireTopic_result getResult(I iface, checkExpireTopic_args args) throws org.apache.thrift.TException {
        checkExpireTopic_result result = new checkExpireTopic_result();
        result.success = iface.checkExpireTopic(args.topicId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getCmsBrandByCommodityBrandId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCmsBrandByCommodityBrandId_args> {
      public getCmsBrandByCommodityBrandId() {
        super("getCmsBrandByCommodityBrandId");
      }

      public getCmsBrandByCommodityBrandId_args getEmptyArgsInstance() {
        return new getCmsBrandByCommodityBrandId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCmsBrandByCommodityBrandId_result getResult(I iface, getCmsBrandByCommodityBrandId_args args) throws org.apache.thrift.TException {
        getCmsBrandByCommodityBrandId_result result = new getCmsBrandByCommodityBrandId_result();
        result.success = iface.getCmsBrandByCommodityBrandId(args.brandId);
        return result;
      }
    }

    public static class getAllCmsBrands<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllCmsBrands_args> {
      public getAllCmsBrands() {
        super("getAllCmsBrands");
      }

      public getAllCmsBrands_args getEmptyArgsInstance() {
        return new getAllCmsBrands_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllCmsBrands_result getResult(I iface, getAllCmsBrands_args args) throws org.apache.thrift.TException {
        getAllCmsBrands_result result = new getAllCmsBrands_result();
        result.success = iface.getAllCmsBrands(args.option);
        return result;
      }
    }

    public static class generateOutletsTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateOutletsTopic_args> {
      public generateOutletsTopic() {
        super("generateOutletsTopic");
      }

      public generateOutletsTopic_args getEmptyArgsInstance() {
        return new generateOutletsTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public generateOutletsTopic_result getResult(I iface, generateOutletsTopic_args args) throws org.apache.thrift.TException {
        generateOutletsTopic_result result = new generateOutletsTopic_result();
        iface.generateOutletsTopic();
        return result;
      }
    }

    public static class getLeftTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLeftTime_args> {
      public getLeftTime() {
        super("getLeftTime");
      }

      public getLeftTime_args getEmptyArgsInstance() {
        return new getLeftTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLeftTime_result getResult(I iface, getLeftTime_args args) throws org.apache.thrift.TException {
        getLeftTime_result result = new getLeftTime_result();
        result.success = iface.getLeftTime(args.outletsTopicId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class batchBuildCommodityPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchBuildCommodityPage_args> {
      public batchBuildCommodityPage() {
        super("batchBuildCommodityPage");
      }

      public batchBuildCommodityPage_args getEmptyArgsInstance() {
        return new batchBuildCommodityPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchBuildCommodityPage_result getResult(I iface, batchBuildCommodityPage_args args) throws org.apache.thrift.TException {
        batchBuildCommodityPage_result result = new batchBuildCommodityPage_result();
        iface.batchBuildCommodityPage();
        return result;
      }
    }

    public static class getLeftTimeForSeckillCommodity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLeftTimeForSeckillCommodity_args> {
      public getLeftTimeForSeckillCommodity() {
        super("getLeftTimeForSeckillCommodity");
      }

      public getLeftTimeForSeckillCommodity_args getEmptyArgsInstance() {
        return new getLeftTimeForSeckillCommodity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLeftTimeForSeckillCommodity_result getResult(I iface, getLeftTimeForSeckillCommodity_args args) throws org.apache.thrift.TException {
        getLeftTimeForSeckillCommodity_result result = new getLeftTimeForSeckillCommodity_result();
        result.success = iface.getLeftTimeForSeckillCommodity();
        return result;
      }
    }

    public static class buildYmcPages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, buildYmcPages_args> {
      public buildYmcPages() {
        super("buildYmcPages");
      }

      public buildYmcPages_args getEmptyArgsInstance() {
        return new buildYmcPages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public buildYmcPages_result getResult(I iface, buildYmcPages_args args) throws org.apache.thrift.TException {
        buildYmcPages_result result = new buildYmcPages_result();
        result.success = iface.buildYmcPages(args.brandNo, args.cateStructName, args.merchantCode);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class buildYmcPagesByParams<I extends Iface> extends org.apache.thrift.ProcessFunction<I, buildYmcPagesByParams_args> {
      public buildYmcPagesByParams() {
        super("buildYmcPagesByParams");
      }

      public buildYmcPagesByParams_args getEmptyArgsInstance() {
        return new buildYmcPagesByParams_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public buildYmcPagesByParams_result getResult(I iface, buildYmcPagesByParams_args args) throws org.apache.thrift.TException {
        buildYmcPagesByParams_result result = new buildYmcPagesByParams_result();
        result.success = iface.buildYmcPagesByParams(args.option);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getBrandKeywords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBrandKeywords_args> {
      public getBrandKeywords() {
        super("getBrandKeywords");
      }

      public getBrandKeywords_args getEmptyArgsInstance() {
        return new getBrandKeywords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBrandKeywords_result getResult(I iface, getBrandKeywords_args args) throws org.apache.thrift.TException {
        getBrandKeywords_result result = new getBrandKeywords_result();
        result.success = iface.getBrandKeywords(args.option);
        return result;
      }
    }

    public static class getAllBrandKeywords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllBrandKeywords_args> {
      public getAllBrandKeywords() {
        super("getAllBrandKeywords");
      }

      public getAllBrandKeywords_args getEmptyArgsInstance() {
        return new getAllBrandKeywords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllBrandKeywords_result getResult(I iface, getAllBrandKeywords_args args) throws org.apache.thrift.TException {
        getAllBrandKeywords_result result = new getAllBrandKeywords_result();
        result.success = iface.getAllBrandKeywords(args.option);
        return result;
      }
    }

    public static class getCategoryKeywords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCategoryKeywords_args> {
      public getCategoryKeywords() {
        super("getCategoryKeywords");
      }

      public getCategoryKeywords_args getEmptyArgsInstance() {
        return new getCategoryKeywords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCategoryKeywords_result getResult(I iface, getCategoryKeywords_args args) throws org.apache.thrift.TException {
        getCategoryKeywords_result result = new getCategoryKeywords_result();
        result.success = iface.getCategoryKeywords(args.option);
        return result;
      }
    }

    public static class getAllCategoryKeywords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllCategoryKeywords_args> {
      public getAllCategoryKeywords() {
        super("getAllCategoryKeywords");
      }

      public getAllCategoryKeywords_args getEmptyArgsInstance() {
        return new getAllCategoryKeywords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllCategoryKeywords_result getResult(I iface, getAllCategoryKeywords_args args) throws org.apache.thrift.TException {
        getAllCategoryKeywords_result result = new getAllCategoryKeywords_result();
        result.success = iface.getAllCategoryKeywords(args.option);
        return result;
      }
    }

    public static class getAllSeoCategoryUrls<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllSeoCategoryUrls_args> {
      public getAllSeoCategoryUrls() {
        super("getAllSeoCategoryUrls");
      }

      public getAllSeoCategoryUrls_args getEmptyArgsInstance() {
        return new getAllSeoCategoryUrls_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllSeoCategoryUrls_result getResult(I iface, getAllSeoCategoryUrls_args args) throws org.apache.thrift.TException {
        getAllSeoCategoryUrls_result result = new getAllSeoCategoryUrls_result();
        result.success = iface.getAllSeoCategoryUrls(args.option);
        return result;
      }
    }

    public static class getAllSeoCategoryInfos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllSeoCategoryInfos_args> {
      public getAllSeoCategoryInfos() {
        super("getAllSeoCategoryInfos");
      }

      public getAllSeoCategoryInfos_args getEmptyArgsInstance() {
        return new getAllSeoCategoryInfos_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllSeoCategoryInfos_result getResult(I iface, getAllSeoCategoryInfos_args args) throws org.apache.thrift.TException {
        getAllSeoCategoryInfos_result result = new getAllSeoCategoryInfos_result();
        result.success = iface.getAllSeoCategoryInfos(args.option);
        return result;
      }
    }

    public static class buildCommodityPageByNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, buildCommodityPageByNo_args> {
      public buildCommodityPageByNo() {
        super("buildCommodityPageByNo");
      }

      public buildCommodityPageByNo_args getEmptyArgsInstance() {
        return new buildCommodityPageByNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public buildCommodityPageByNo_result getResult(I iface, buildCommodityPageByNo_args args) throws org.apache.thrift.TException {
        buildCommodityPageByNo_result result = new buildCommodityPageByNo_result();
        result.success = iface.buildCommodityPageByNo(args.commodityNo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRandomSeoKeywords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRandomSeoKeywords_args> {
      public getRandomSeoKeywords() {
        super("getRandomSeoKeywords");
      }

      public getRandomSeoKeywords_args getEmptyArgsInstance() {
        return new getRandomSeoKeywords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRandomSeoKeywords_result getResult(I iface, getRandomSeoKeywords_args args) throws org.apache.thrift.TException {
        getRandomSeoKeywords_result result = new getRandomSeoKeywords_result();
        result.success = iface.getRandomSeoKeywords(args.num);
        return result;
      }
    }

    public static class CmsBatchBuildPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CmsBatchBuildPage_args> {
      public CmsBatchBuildPage() {
        super("CmsBatchBuildPage");
      }

      public CmsBatchBuildPage_args getEmptyArgsInstance() {
        return new CmsBatchBuildPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CmsBatchBuildPage_result getResult(I iface, CmsBatchBuildPage_args args) throws org.apache.thrift.TException {
        CmsBatchBuildPage_result result = new CmsBatchBuildPage_result();
        iface.CmsBatchBuildPage(args.option);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("checkExpireTopic", new checkExpireTopic());
      processMap.put("getCmsBrandByCommodityBrandId", new getCmsBrandByCommodityBrandId());
      processMap.put("getAllCmsBrands", new getAllCmsBrands());
      processMap.put("generateOutletsTopic", new generateOutletsTopic());
      processMap.put("getLeftTime", new getLeftTime());
      processMap.put("batchBuildCommodityPage", new batchBuildCommodityPage());
      processMap.put("getLeftTimeForSeckillCommodity", new getLeftTimeForSeckillCommodity());
      processMap.put("buildYmcPages", new buildYmcPages());
      processMap.put("buildYmcPagesByParams", new buildYmcPagesByParams());
      processMap.put("getBrandKeywords", new getBrandKeywords());
      processMap.put("getAllBrandKeywords", new getAllBrandKeywords());
      processMap.put("getCategoryKeywords", new getCategoryKeywords());
      processMap.put("getAllCategoryKeywords", new getAllCategoryKeywords());
      processMap.put("getAllSeoCategoryUrls", new getAllSeoCategoryUrls());
      processMap.put("getAllSeoCategoryInfos", new getAllSeoCategoryInfos());
      processMap.put("buildCommodityPageByNo", new buildCommodityPageByNo());
      processMap.put("getRandomSeoKeywords", new getRandomSeoKeywords());
      processMap.put("CmsBatchBuildPage", new CmsBatchBuildPage());
      return processMap;
    }

    public static class checkExpireTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkExpireTopic_args, Boolean> {
      public checkExpireTopic() {
        super("checkExpireTopic");
      }

      public checkExpireTopic_args getEmptyArgsInstance() {
        return new checkExpireTopic_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkExpireTopic_result result = new checkExpireTopic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkExpireTopic_result result = new checkExpireTopic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkExpireTopic_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkExpireTopic(args.topicId,resultHandler);
      }
    }

    public static class getCmsBrandByCommodityBrandId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCmsBrandByCommodityBrandId_args, NewCmsBrand> {
      public getCmsBrandByCommodityBrandId() {
        super("getCmsBrandByCommodityBrandId");
      }

      public getCmsBrandByCommodityBrandId_args getEmptyArgsInstance() {
        return new getCmsBrandByCommodityBrandId_args();
      }

      public AsyncMethodCallback<NewCmsBrand> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NewCmsBrand>() { 
          public void onComplete(NewCmsBrand o) {
            getCmsBrandByCommodityBrandId_result result = new getCmsBrandByCommodityBrandId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCmsBrandByCommodityBrandId_result result = new getCmsBrandByCommodityBrandId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCmsBrandByCommodityBrandId_args args, org.apache.thrift.async.AsyncMethodCallback<NewCmsBrand> resultHandler) throws TException {
        iface.getCmsBrandByCommodityBrandId(args.brandId,resultHandler);
      }
    }

    public static class getAllCmsBrands<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllCmsBrands_args, CmsPageResultsInfos> {
      public getAllCmsBrands() {
        super("getAllCmsBrands");
      }

      public getAllCmsBrands_args getEmptyArgsInstance() {
        return new getAllCmsBrands_args();
      }

      public AsyncMethodCallback<CmsPageResultsInfos> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CmsPageResultsInfos>() { 
          public void onComplete(CmsPageResultsInfos o) {
            getAllCmsBrands_result result = new getAllCmsBrands_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllCmsBrands_result result = new getAllCmsBrands_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllCmsBrands_args args, org.apache.thrift.async.AsyncMethodCallback<CmsPageResultsInfos> resultHandler) throws TException {
        iface.getAllCmsBrands(args.option,resultHandler);
      }
    }

    public static class generateOutletsTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generateOutletsTopic_args, Void> {
      public generateOutletsTopic() {
        super("generateOutletsTopic");
      }

      public generateOutletsTopic_args getEmptyArgsInstance() {
        return new generateOutletsTopic_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            generateOutletsTopic_result result = new generateOutletsTopic_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            generateOutletsTopic_result result = new generateOutletsTopic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generateOutletsTopic_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.generateOutletsTopic(resultHandler);
      }
    }

    public static class getLeftTime<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLeftTime_args, Integer> {
      public getLeftTime() {
        super("getLeftTime");
      }

      public getLeftTime_args getEmptyArgsInstance() {
        return new getLeftTime_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getLeftTime_result result = new getLeftTime_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLeftTime_result result = new getLeftTime_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLeftTime_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getLeftTime(args.outletsTopicId,resultHandler);
      }
    }

    public static class batchBuildCommodityPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchBuildCommodityPage_args, Void> {
      public batchBuildCommodityPage() {
        super("batchBuildCommodityPage");
      }

      public batchBuildCommodityPage_args getEmptyArgsInstance() {
        return new batchBuildCommodityPage_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            batchBuildCommodityPage_result result = new batchBuildCommodityPage_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchBuildCommodityPage_result result = new batchBuildCommodityPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchBuildCommodityPage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.batchBuildCommodityPage(resultHandler);
      }
    }

    public static class getLeftTimeForSeckillCommodity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLeftTimeForSeckillCommodity_args, List<Map<String,String>>> {
      public getLeftTimeForSeckillCommodity() {
        super("getLeftTimeForSeckillCommodity");
      }

      public getLeftTimeForSeckillCommodity_args getEmptyArgsInstance() {
        return new getLeftTimeForSeckillCommodity_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            getLeftTimeForSeckillCommodity_result result = new getLeftTimeForSeckillCommodity_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLeftTimeForSeckillCommodity_result result = new getLeftTimeForSeckillCommodity_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLeftTimeForSeckillCommodity_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.getLeftTimeForSeckillCommodity(resultHandler);
      }
    }

    public static class buildYmcPages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, buildYmcPages_args, Integer> {
      public buildYmcPages() {
        super("buildYmcPages");
      }

      public buildYmcPages_args getEmptyArgsInstance() {
        return new buildYmcPages_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            buildYmcPages_result result = new buildYmcPages_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            buildYmcPages_result result = new buildYmcPages_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, buildYmcPages_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.buildYmcPages(args.brandNo, args.cateStructName, args.merchantCode,resultHandler);
      }
    }

    public static class buildYmcPagesByParams<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, buildYmcPagesByParams_args, Integer> {
      public buildYmcPagesByParams() {
        super("buildYmcPagesByParams");
      }

      public buildYmcPagesByParams_args getEmptyArgsInstance() {
        return new buildYmcPagesByParams_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            buildYmcPagesByParams_result result = new buildYmcPagesByParams_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            buildYmcPagesByParams_result result = new buildYmcPagesByParams_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, buildYmcPagesByParams_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.buildYmcPagesByParams(args.option,resultHandler);
      }
    }

    public static class getBrandKeywords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBrandKeywords_args, Map<String,List<Map<String,String>>>> {
      public getBrandKeywords() {
        super("getBrandKeywords");
      }

      public getBrandKeywords_args getEmptyArgsInstance() {
        return new getBrandKeywords_args();
      }

      public AsyncMethodCallback<Map<String,List<Map<String,String>>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<Map<String,String>>>>() { 
          public void onComplete(Map<String,List<Map<String,String>>> o) {
            getBrandKeywords_result result = new getBrandKeywords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBrandKeywords_result result = new getBrandKeywords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBrandKeywords_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<Map<String,String>>>> resultHandler) throws TException {
        iface.getBrandKeywords(args.option,resultHandler);
      }
    }

    public static class getAllBrandKeywords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllBrandKeywords_args, Map<String,Map<String,List<Map<String,String>>>>> {
      public getAllBrandKeywords() {
        super("getAllBrandKeywords");
      }

      public getAllBrandKeywords_args getEmptyArgsInstance() {
        return new getAllBrandKeywords_args();
      }

      public AsyncMethodCallback<Map<String,Map<String,List<Map<String,String>>>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Map<String,List<Map<String,String>>>>>() { 
          public void onComplete(Map<String,Map<String,List<Map<String,String>>>> o) {
            getAllBrandKeywords_result result = new getAllBrandKeywords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllBrandKeywords_result result = new getAllBrandKeywords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllBrandKeywords_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Map<String,List<Map<String,String>>>>> resultHandler) throws TException {
        iface.getAllBrandKeywords(args.option,resultHandler);
      }
    }

    public static class getCategoryKeywords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCategoryKeywords_args, Map<String,List<Map<String,String>>>> {
      public getCategoryKeywords() {
        super("getCategoryKeywords");
      }

      public getCategoryKeywords_args getEmptyArgsInstance() {
        return new getCategoryKeywords_args();
      }

      public AsyncMethodCallback<Map<String,List<Map<String,String>>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<Map<String,String>>>>() { 
          public void onComplete(Map<String,List<Map<String,String>>> o) {
            getCategoryKeywords_result result = new getCategoryKeywords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCategoryKeywords_result result = new getCategoryKeywords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCategoryKeywords_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<Map<String,String>>>> resultHandler) throws TException {
        iface.getCategoryKeywords(args.option,resultHandler);
      }
    }

    public static class getAllCategoryKeywords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllCategoryKeywords_args, Map<String,List<Map<String,String>>>> {
      public getAllCategoryKeywords() {
        super("getAllCategoryKeywords");
      }

      public getAllCategoryKeywords_args getEmptyArgsInstance() {
        return new getAllCategoryKeywords_args();
      }

      public AsyncMethodCallback<Map<String,List<Map<String,String>>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<Map<String,String>>>>() { 
          public void onComplete(Map<String,List<Map<String,String>>> o) {
            getAllCategoryKeywords_result result = new getAllCategoryKeywords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllCategoryKeywords_result result = new getAllCategoryKeywords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllCategoryKeywords_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<Map<String,String>>>> resultHandler) throws TException {
        iface.getAllCategoryKeywords(args.option,resultHandler);
      }
    }

    public static class getAllSeoCategoryUrls<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllSeoCategoryUrls_args, CmsPageResultsInfos> {
      public getAllSeoCategoryUrls() {
        super("getAllSeoCategoryUrls");
      }

      public getAllSeoCategoryUrls_args getEmptyArgsInstance() {
        return new getAllSeoCategoryUrls_args();
      }

      public AsyncMethodCallback<CmsPageResultsInfos> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CmsPageResultsInfos>() { 
          public void onComplete(CmsPageResultsInfos o) {
            getAllSeoCategoryUrls_result result = new getAllSeoCategoryUrls_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllSeoCategoryUrls_result result = new getAllSeoCategoryUrls_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllSeoCategoryUrls_args args, org.apache.thrift.async.AsyncMethodCallback<CmsPageResultsInfos> resultHandler) throws TException {
        iface.getAllSeoCategoryUrls(args.option,resultHandler);
      }
    }

    public static class getAllSeoCategoryInfos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllSeoCategoryInfos_args, CmsPageResultsInfos> {
      public getAllSeoCategoryInfos() {
        super("getAllSeoCategoryInfos");
      }

      public getAllSeoCategoryInfos_args getEmptyArgsInstance() {
        return new getAllSeoCategoryInfos_args();
      }

      public AsyncMethodCallback<CmsPageResultsInfos> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CmsPageResultsInfos>() { 
          public void onComplete(CmsPageResultsInfos o) {
            getAllSeoCategoryInfos_result result = new getAllSeoCategoryInfos_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllSeoCategoryInfos_result result = new getAllSeoCategoryInfos_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllSeoCategoryInfos_args args, org.apache.thrift.async.AsyncMethodCallback<CmsPageResultsInfos> resultHandler) throws TException {
        iface.getAllSeoCategoryInfos(args.option,resultHandler);
      }
    }

    public static class buildCommodityPageByNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, buildCommodityPageByNo_args, Boolean> {
      public buildCommodityPageByNo() {
        super("buildCommodityPageByNo");
      }

      public buildCommodityPageByNo_args getEmptyArgsInstance() {
        return new buildCommodityPageByNo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            buildCommodityPageByNo_result result = new buildCommodityPageByNo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            buildCommodityPageByNo_result result = new buildCommodityPageByNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, buildCommodityPageByNo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.buildCommodityPageByNo(args.commodityNo,resultHandler);
      }
    }

    public static class getRandomSeoKeywords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRandomSeoKeywords_args, List<Map<String,String>>> {
      public getRandomSeoKeywords() {
        super("getRandomSeoKeywords");
      }

      public getRandomSeoKeywords_args getEmptyArgsInstance() {
        return new getRandomSeoKeywords_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            getRandomSeoKeywords_result result = new getRandomSeoKeywords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRandomSeoKeywords_result result = new getRandomSeoKeywords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRandomSeoKeywords_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.getRandomSeoKeywords(args.num,resultHandler);
      }
    }

    public static class CmsBatchBuildPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CmsBatchBuildPage_args, Void> {
      public CmsBatchBuildPage() {
        super("CmsBatchBuildPage");
      }

      public CmsBatchBuildPage_args getEmptyArgsInstance() {
        return new CmsBatchBuildPage_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CmsBatchBuildPage_result result = new CmsBatchBuildPage_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CmsBatchBuildPage_result result = new CmsBatchBuildPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CmsBatchBuildPage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CmsBatchBuildPage(args.option,resultHandler);
      }
    }

  }

  public static class checkExpireTopic_args implements org.apache.thrift.TBase<checkExpireTopic_args, checkExpireTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkExpireTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkExpireTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkExpireTopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkExpireTopic_argsTupleSchemeFactory());
    }

    public String topicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkExpireTopic_args.class, metaDataMap);
    }

    public checkExpireTopic_args() {
    }

    public checkExpireTopic_args(
      String topicId)
    {
      this();
      this.topicId = topicId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkExpireTopic_args(checkExpireTopic_args other) {
      if (other.isSetTopicId()) {
        this.topicId = other.topicId;
      }
    }

    public checkExpireTopic_args deepCopy() {
      return new checkExpireTopic_args(this);
    }

    @Override
    public void clear() {
      this.topicId = null;
    }

    public String getTopicId() {
      return this.topicId;
    }

    public checkExpireTopic_args setTopicId(String topicId) {
      this.topicId = topicId;
      return this;
    }

    public void unsetTopicId() {
      this.topicId = null;
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return this.topicId != null;
    }

    public void setTopicIdIsSet(boolean value) {
      if (!value) {
        this.topicId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return getTopicId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkExpireTopic_args)
        return this.equals((checkExpireTopic_args)that);
      return false;
    }

    public boolean equals(checkExpireTopic_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true && this.isSetTopicId();
      boolean that_present_topicId = true && that.isSetTopicId();
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (!this.topicId.equals(that.topicId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkExpireTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkExpireTopic_args(");
      boolean first = true;

      sb.append("topicId:");
      if (this.topicId == null) {
        sb.append("null");
      } else {
        sb.append(this.topicId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkExpireTopic_argsStandardSchemeFactory implements SchemeFactory {
      public checkExpireTopic_argsStandardScheme getScheme() {
        return new checkExpireTopic_argsStandardScheme();
      }
    }

    private static class checkExpireTopic_argsStandardScheme extends StandardScheme<checkExpireTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkExpireTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topicId = iprot.readString();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkExpireTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicId != null) {
          oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
          oprot.writeString(struct.topicId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkExpireTopic_argsTupleSchemeFactory implements SchemeFactory {
      public checkExpireTopic_argsTupleScheme getScheme() {
        return new checkExpireTopic_argsTupleScheme();
      }
    }

    private static class checkExpireTopic_argsTupleScheme extends TupleScheme<checkExpireTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkExpireTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicId()) {
          oprot.writeString(struct.topicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkExpireTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicId = iprot.readString();
          struct.setTopicIdIsSet(true);
        }
      }
    }

  }

  public static class checkExpireTopic_result implements org.apache.thrift.TBase<checkExpireTopic_result, checkExpireTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkExpireTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkExpireTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkExpireTopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkExpireTopic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkExpireTopic_result.class, metaDataMap);
    }

    public checkExpireTopic_result() {
    }

    public checkExpireTopic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkExpireTopic_result(checkExpireTopic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkExpireTopic_result deepCopy() {
      return new checkExpireTopic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkExpireTopic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkExpireTopic_result)
        return this.equals((checkExpireTopic_result)that);
      return false;
    }

    public boolean equals(checkExpireTopic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkExpireTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkExpireTopic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkExpireTopic_resultStandardSchemeFactory implements SchemeFactory {
      public checkExpireTopic_resultStandardScheme getScheme() {
        return new checkExpireTopic_resultStandardScheme();
      }
    }

    private static class checkExpireTopic_resultStandardScheme extends StandardScheme<checkExpireTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkExpireTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkExpireTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkExpireTopic_resultTupleSchemeFactory implements SchemeFactory {
      public checkExpireTopic_resultTupleScheme getScheme() {
        return new checkExpireTopic_resultTupleScheme();
      }
    }

    private static class checkExpireTopic_resultTupleScheme extends TupleScheme<checkExpireTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkExpireTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkExpireTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCmsBrandByCommodityBrandId_args implements org.apache.thrift.TBase<getCmsBrandByCommodityBrandId_args, getCmsBrandByCommodityBrandId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCmsBrandByCommodityBrandId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCmsBrandByCommodityBrandId_args");

    private static final org.apache.thrift.protocol.TField BRAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brandId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCmsBrandByCommodityBrandId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCmsBrandByCommodityBrandId_argsTupleSchemeFactory());
    }

    public String brandId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BRAND_ID((short)1, "brandId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BRAND_ID
            return BRAND_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BRAND_ID, new org.apache.thrift.meta_data.FieldMetaData("brandId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCmsBrandByCommodityBrandId_args.class, metaDataMap);
    }

    public getCmsBrandByCommodityBrandId_args() {
    }

    public getCmsBrandByCommodityBrandId_args(
      String brandId)
    {
      this();
      this.brandId = brandId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCmsBrandByCommodityBrandId_args(getCmsBrandByCommodityBrandId_args other) {
      if (other.isSetBrandId()) {
        this.brandId = other.brandId;
      }
    }

    public getCmsBrandByCommodityBrandId_args deepCopy() {
      return new getCmsBrandByCommodityBrandId_args(this);
    }

    @Override
    public void clear() {
      this.brandId = null;
    }

    public String getBrandId() {
      return this.brandId;
    }

    public getCmsBrandByCommodityBrandId_args setBrandId(String brandId) {
      this.brandId = brandId;
      return this;
    }

    public void unsetBrandId() {
      this.brandId = null;
    }

    /** Returns true if field brandId is set (has been assigned a value) and false otherwise */
    public boolean isSetBrandId() {
      return this.brandId != null;
    }

    public void setBrandIdIsSet(boolean value) {
      if (!value) {
        this.brandId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BRAND_ID:
        if (value == null) {
          unsetBrandId();
        } else {
          setBrandId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BRAND_ID:
        return getBrandId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BRAND_ID:
        return isSetBrandId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCmsBrandByCommodityBrandId_args)
        return this.equals((getCmsBrandByCommodityBrandId_args)that);
      return false;
    }

    public boolean equals(getCmsBrandByCommodityBrandId_args that) {
      if (that == null)
        return false;

      boolean this_present_brandId = true && this.isSetBrandId();
      boolean that_present_brandId = true && that.isSetBrandId();
      if (this_present_brandId || that_present_brandId) {
        if (!(this_present_brandId && that_present_brandId))
          return false;
        if (!this.brandId.equals(that.brandId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCmsBrandByCommodityBrandId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBrandId()).compareTo(other.isSetBrandId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBrandId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandId, other.brandId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCmsBrandByCommodityBrandId_args(");
      boolean first = true;

      sb.append("brandId:");
      if (this.brandId == null) {
        sb.append("null");
      } else {
        sb.append(this.brandId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCmsBrandByCommodityBrandId_argsStandardSchemeFactory implements SchemeFactory {
      public getCmsBrandByCommodityBrandId_argsStandardScheme getScheme() {
        return new getCmsBrandByCommodityBrandId_argsStandardScheme();
      }
    }

    private static class getCmsBrandByCommodityBrandId_argsStandardScheme extends StandardScheme<getCmsBrandByCommodityBrandId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCmsBrandByCommodityBrandId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BRAND_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.brandId = iprot.readString();
                struct.setBrandIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCmsBrandByCommodityBrandId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.brandId != null) {
          oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
          oprot.writeString(struct.brandId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCmsBrandByCommodityBrandId_argsTupleSchemeFactory implements SchemeFactory {
      public getCmsBrandByCommodityBrandId_argsTupleScheme getScheme() {
        return new getCmsBrandByCommodityBrandId_argsTupleScheme();
      }
    }

    private static class getCmsBrandByCommodityBrandId_argsTupleScheme extends TupleScheme<getCmsBrandByCommodityBrandId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCmsBrandByCommodityBrandId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBrandId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBrandId()) {
          oprot.writeString(struct.brandId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCmsBrandByCommodityBrandId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.brandId = iprot.readString();
          struct.setBrandIdIsSet(true);
        }
      }
    }

  }

  public static class getCmsBrandByCommodityBrandId_result implements org.apache.thrift.TBase<getCmsBrandByCommodityBrandId_result, getCmsBrandByCommodityBrandId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCmsBrandByCommodityBrandId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCmsBrandByCommodityBrandId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCmsBrandByCommodityBrandId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCmsBrandByCommodityBrandId_resultTupleSchemeFactory());
    }

    public NewCmsBrand success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NewCmsBrand.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCmsBrandByCommodityBrandId_result.class, metaDataMap);
    }

    public getCmsBrandByCommodityBrandId_result() {
    }

    public getCmsBrandByCommodityBrandId_result(
      NewCmsBrand success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCmsBrandByCommodityBrandId_result(getCmsBrandByCommodityBrandId_result other) {
      if (other.isSetSuccess()) {
        this.success = new NewCmsBrand(other.success);
      }
    }

    public getCmsBrandByCommodityBrandId_result deepCopy() {
      return new getCmsBrandByCommodityBrandId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NewCmsBrand getSuccess() {
      return this.success;
    }

    public getCmsBrandByCommodityBrandId_result setSuccess(NewCmsBrand success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NewCmsBrand)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCmsBrandByCommodityBrandId_result)
        return this.equals((getCmsBrandByCommodityBrandId_result)that);
      return false;
    }

    public boolean equals(getCmsBrandByCommodityBrandId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCmsBrandByCommodityBrandId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCmsBrandByCommodityBrandId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCmsBrandByCommodityBrandId_resultStandardSchemeFactory implements SchemeFactory {
      public getCmsBrandByCommodityBrandId_resultStandardScheme getScheme() {
        return new getCmsBrandByCommodityBrandId_resultStandardScheme();
      }
    }

    private static class getCmsBrandByCommodityBrandId_resultStandardScheme extends StandardScheme<getCmsBrandByCommodityBrandId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCmsBrandByCommodityBrandId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NewCmsBrand();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCmsBrandByCommodityBrandId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCmsBrandByCommodityBrandId_resultTupleSchemeFactory implements SchemeFactory {
      public getCmsBrandByCommodityBrandId_resultTupleScheme getScheme() {
        return new getCmsBrandByCommodityBrandId_resultTupleScheme();
      }
    }

    private static class getCmsBrandByCommodityBrandId_resultTupleScheme extends TupleScheme<getCmsBrandByCommodityBrandId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCmsBrandByCommodityBrandId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCmsBrandByCommodityBrandId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NewCmsBrand();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllCmsBrands_args implements org.apache.thrift.TBase<getAllCmsBrands_args, getAllCmsBrands_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllCmsBrands_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllCmsBrands_args");

    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllCmsBrands_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllCmsBrands_argsTupleSchemeFactory());
    }

    public Map<String,String> option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPTION((short)1, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllCmsBrands_args.class, metaDataMap);
    }

    public getAllCmsBrands_args() {
    }

    public getAllCmsBrands_args(
      Map<String,String> option)
    {
      this();
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllCmsBrands_args(getAllCmsBrands_args other) {
      if (other.isSetOption()) {
        Map<String,String> __this__option = new HashMap<String,String>(other.option);
        this.option = __this__option;
      }
    }

    public getAllCmsBrands_args deepCopy() {
      return new getAllCmsBrands_args(this);
    }

    @Override
    public void clear() {
      this.option = null;
    }

    public int getOptionSize() {
      return (this.option == null) ? 0 : this.option.size();
    }

    public void putToOption(String key, String val) {
      if (this.option == null) {
        this.option = new HashMap<String,String>();
      }
      this.option.put(key, val);
    }

    public Map<String,String> getOption() {
      return this.option;
    }

    public getAllCmsBrands_args setOption(Map<String,String> option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllCmsBrands_args)
        return this.equals((getAllCmsBrands_args)that);
      return false;
    }

    public boolean equals(getAllCmsBrands_args that) {
      if (that == null)
        return false;

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllCmsBrands_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllCmsBrands_args(");
      boolean first = true;

      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllCmsBrands_argsStandardSchemeFactory implements SchemeFactory {
      public getAllCmsBrands_argsStandardScheme getScheme() {
        return new getAllCmsBrands_argsStandardScheme();
      }
    }

    private static class getAllCmsBrands_argsStandardScheme extends StandardScheme<getAllCmsBrands_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllCmsBrands_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                  struct.option = new HashMap<String,String>(2*_map34.size);
                  for (int _i35 = 0; _i35 < _map34.size; ++_i35)
                  {
                    String _key36;
                    String _val37;
                    _key36 = iprot.readString();
                    _val37 = iprot.readString();
                    struct.option.put(_key36, _val37);
                  }
                  iprot.readMapEnd();
                }
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllCmsBrands_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.option.size()));
            for (Map.Entry<String, String> _iter38 : struct.option.entrySet())
            {
              oprot.writeString(_iter38.getKey());
              oprot.writeString(_iter38.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllCmsBrands_argsTupleSchemeFactory implements SchemeFactory {
      public getAllCmsBrands_argsTupleScheme getScheme() {
        return new getAllCmsBrands_argsTupleScheme();
      }
    }

    private static class getAllCmsBrands_argsTupleScheme extends TupleScheme<getAllCmsBrands_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllCmsBrands_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOption()) {
          {
            oprot.writeI32(struct.option.size());
            for (Map.Entry<String, String> _iter39 : struct.option.entrySet())
            {
              oprot.writeString(_iter39.getKey());
              oprot.writeString(_iter39.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllCmsBrands_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.option = new HashMap<String,String>(2*_map40.size);
            for (int _i41 = 0; _i41 < _map40.size; ++_i41)
            {
              String _key42;
              String _val43;
              _key42 = iprot.readString();
              _val43 = iprot.readString();
              struct.option.put(_key42, _val43);
            }
          }
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class getAllCmsBrands_result implements org.apache.thrift.TBase<getAllCmsBrands_result, getAllCmsBrands_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllCmsBrands_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllCmsBrands_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllCmsBrands_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllCmsBrands_resultTupleSchemeFactory());
    }

    public CmsPageResultsInfos success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CmsPageResultsInfos.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllCmsBrands_result.class, metaDataMap);
    }

    public getAllCmsBrands_result() {
    }

    public getAllCmsBrands_result(
      CmsPageResultsInfos success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllCmsBrands_result(getAllCmsBrands_result other) {
      if (other.isSetSuccess()) {
        this.success = new CmsPageResultsInfos(other.success);
      }
    }

    public getAllCmsBrands_result deepCopy() {
      return new getAllCmsBrands_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CmsPageResultsInfos getSuccess() {
      return this.success;
    }

    public getAllCmsBrands_result setSuccess(CmsPageResultsInfos success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CmsPageResultsInfos)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllCmsBrands_result)
        return this.equals((getAllCmsBrands_result)that);
      return false;
    }

    public boolean equals(getAllCmsBrands_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllCmsBrands_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllCmsBrands_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllCmsBrands_resultStandardSchemeFactory implements SchemeFactory {
      public getAllCmsBrands_resultStandardScheme getScheme() {
        return new getAllCmsBrands_resultStandardScheme();
      }
    }

    private static class getAllCmsBrands_resultStandardScheme extends StandardScheme<getAllCmsBrands_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllCmsBrands_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CmsPageResultsInfos();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllCmsBrands_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllCmsBrands_resultTupleSchemeFactory implements SchemeFactory {
      public getAllCmsBrands_resultTupleScheme getScheme() {
        return new getAllCmsBrands_resultTupleScheme();
      }
    }

    private static class getAllCmsBrands_resultTupleScheme extends TupleScheme<getAllCmsBrands_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllCmsBrands_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllCmsBrands_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CmsPageResultsInfos();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class generateOutletsTopic_args implements org.apache.thrift.TBase<generateOutletsTopic_args, generateOutletsTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<generateOutletsTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateOutletsTopic_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateOutletsTopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateOutletsTopic_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateOutletsTopic_args.class, metaDataMap);
    }

    public generateOutletsTopic_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateOutletsTopic_args(generateOutletsTopic_args other) {
    }

    public generateOutletsTopic_args deepCopy() {
      return new generateOutletsTopic_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateOutletsTopic_args)
        return this.equals((generateOutletsTopic_args)that);
      return false;
    }

    public boolean equals(generateOutletsTopic_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(generateOutletsTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateOutletsTopic_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateOutletsTopic_argsStandardSchemeFactory implements SchemeFactory {
      public generateOutletsTopic_argsStandardScheme getScheme() {
        return new generateOutletsTopic_argsStandardScheme();
      }
    }

    private static class generateOutletsTopic_argsStandardScheme extends StandardScheme<generateOutletsTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateOutletsTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateOutletsTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateOutletsTopic_argsTupleSchemeFactory implements SchemeFactory {
      public generateOutletsTopic_argsTupleScheme getScheme() {
        return new generateOutletsTopic_argsTupleScheme();
      }
    }

    private static class generateOutletsTopic_argsTupleScheme extends TupleScheme<generateOutletsTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateOutletsTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateOutletsTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class generateOutletsTopic_result implements org.apache.thrift.TBase<generateOutletsTopic_result, generateOutletsTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<generateOutletsTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateOutletsTopic_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new generateOutletsTopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new generateOutletsTopic_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateOutletsTopic_result.class, metaDataMap);
    }

    public generateOutletsTopic_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateOutletsTopic_result(generateOutletsTopic_result other) {
    }

    public generateOutletsTopic_result deepCopy() {
      return new generateOutletsTopic_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateOutletsTopic_result)
        return this.equals((generateOutletsTopic_result)that);
      return false;
    }

    public boolean equals(generateOutletsTopic_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(generateOutletsTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateOutletsTopic_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generateOutletsTopic_resultStandardSchemeFactory implements SchemeFactory {
      public generateOutletsTopic_resultStandardScheme getScheme() {
        return new generateOutletsTopic_resultStandardScheme();
      }
    }

    private static class generateOutletsTopic_resultStandardScheme extends StandardScheme<generateOutletsTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generateOutletsTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generateOutletsTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generateOutletsTopic_resultTupleSchemeFactory implements SchemeFactory {
      public generateOutletsTopic_resultTupleScheme getScheme() {
        return new generateOutletsTopic_resultTupleScheme();
      }
    }

    private static class generateOutletsTopic_resultTupleScheme extends TupleScheme<generateOutletsTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generateOutletsTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generateOutletsTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getLeftTime_args implements org.apache.thrift.TBase<getLeftTime_args, getLeftTime_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLeftTime_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLeftTime_args");

    private static final org.apache.thrift.protocol.TField OUTLETS_TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletsTopicId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLeftTime_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLeftTime_argsTupleSchemeFactory());
    }

    public String outletsTopicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLETS_TOPIC_ID((short)1, "outletsTopicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLETS_TOPIC_ID
            return OUTLETS_TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLETS_TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("outletsTopicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLeftTime_args.class, metaDataMap);
    }

    public getLeftTime_args() {
    }

    public getLeftTime_args(
      String outletsTopicId)
    {
      this();
      this.outletsTopicId = outletsTopicId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLeftTime_args(getLeftTime_args other) {
      if (other.isSetOutletsTopicId()) {
        this.outletsTopicId = other.outletsTopicId;
      }
    }

    public getLeftTime_args deepCopy() {
      return new getLeftTime_args(this);
    }

    @Override
    public void clear() {
      this.outletsTopicId = null;
    }

    public String getOutletsTopicId() {
      return this.outletsTopicId;
    }

    public getLeftTime_args setOutletsTopicId(String outletsTopicId) {
      this.outletsTopicId = outletsTopicId;
      return this;
    }

    public void unsetOutletsTopicId() {
      this.outletsTopicId = null;
    }

    /** Returns true if field outletsTopicId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletsTopicId() {
      return this.outletsTopicId != null;
    }

    public void setOutletsTopicIdIsSet(boolean value) {
      if (!value) {
        this.outletsTopicId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLETS_TOPIC_ID:
        if (value == null) {
          unsetOutletsTopicId();
        } else {
          setOutletsTopicId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLETS_TOPIC_ID:
        return getOutletsTopicId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLETS_TOPIC_ID:
        return isSetOutletsTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLeftTime_args)
        return this.equals((getLeftTime_args)that);
      return false;
    }

    public boolean equals(getLeftTime_args that) {
      if (that == null)
        return false;

      boolean this_present_outletsTopicId = true && this.isSetOutletsTopicId();
      boolean that_present_outletsTopicId = true && that.isSetOutletsTopicId();
      if (this_present_outletsTopicId || that_present_outletsTopicId) {
        if (!(this_present_outletsTopicId && that_present_outletsTopicId))
          return false;
        if (!this.outletsTopicId.equals(that.outletsTopicId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLeftTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletsTopicId()).compareTo(other.isSetOutletsTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletsTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletsTopicId, other.outletsTopicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLeftTime_args(");
      boolean first = true;

      sb.append("outletsTopicId:");
      if (this.outletsTopicId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletsTopicId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLeftTime_argsStandardSchemeFactory implements SchemeFactory {
      public getLeftTime_argsStandardScheme getScheme() {
        return new getLeftTime_argsStandardScheme();
      }
    }

    private static class getLeftTime_argsStandardScheme extends StandardScheme<getLeftTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLeftTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLETS_TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletsTopicId = iprot.readString();
                struct.setOutletsTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLeftTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletsTopicId != null) {
          oprot.writeFieldBegin(OUTLETS_TOPIC_ID_FIELD_DESC);
          oprot.writeString(struct.outletsTopicId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLeftTime_argsTupleSchemeFactory implements SchemeFactory {
      public getLeftTime_argsTupleScheme getScheme() {
        return new getLeftTime_argsTupleScheme();
      }
    }

    private static class getLeftTime_argsTupleScheme extends TupleScheme<getLeftTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLeftTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletsTopicId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletsTopicId()) {
          oprot.writeString(struct.outletsTopicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLeftTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletsTopicId = iprot.readString();
          struct.setOutletsTopicIdIsSet(true);
        }
      }
    }

  }

  public static class getLeftTime_result implements org.apache.thrift.TBase<getLeftTime_result, getLeftTime_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLeftTime_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLeftTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLeftTime_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLeftTime_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLeftTime_result.class, metaDataMap);
    }

    public getLeftTime_result() {
    }

    public getLeftTime_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLeftTime_result(getLeftTime_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getLeftTime_result deepCopy() {
      return new getLeftTime_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getLeftTime_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLeftTime_result)
        return this.equals((getLeftTime_result)that);
      return false;
    }

    public boolean equals(getLeftTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLeftTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLeftTime_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLeftTime_resultStandardSchemeFactory implements SchemeFactory {
      public getLeftTime_resultStandardScheme getScheme() {
        return new getLeftTime_resultStandardScheme();
      }
    }

    private static class getLeftTime_resultStandardScheme extends StandardScheme<getLeftTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLeftTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLeftTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLeftTime_resultTupleSchemeFactory implements SchemeFactory {
      public getLeftTime_resultTupleScheme getScheme() {
        return new getLeftTime_resultTupleScheme();
      }
    }

    private static class getLeftTime_resultTupleScheme extends TupleScheme<getLeftTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLeftTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLeftTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class batchBuildCommodityPage_args implements org.apache.thrift.TBase<batchBuildCommodityPage_args, batchBuildCommodityPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchBuildCommodityPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchBuildCommodityPage_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchBuildCommodityPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchBuildCommodityPage_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchBuildCommodityPage_args.class, metaDataMap);
    }

    public batchBuildCommodityPage_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchBuildCommodityPage_args(batchBuildCommodityPage_args other) {
    }

    public batchBuildCommodityPage_args deepCopy() {
      return new batchBuildCommodityPage_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchBuildCommodityPage_args)
        return this.equals((batchBuildCommodityPage_args)that);
      return false;
    }

    public boolean equals(batchBuildCommodityPage_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchBuildCommodityPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchBuildCommodityPage_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchBuildCommodityPage_argsStandardSchemeFactory implements SchemeFactory {
      public batchBuildCommodityPage_argsStandardScheme getScheme() {
        return new batchBuildCommodityPage_argsStandardScheme();
      }
    }

    private static class batchBuildCommodityPage_argsStandardScheme extends StandardScheme<batchBuildCommodityPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchBuildCommodityPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchBuildCommodityPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchBuildCommodityPage_argsTupleSchemeFactory implements SchemeFactory {
      public batchBuildCommodityPage_argsTupleScheme getScheme() {
        return new batchBuildCommodityPage_argsTupleScheme();
      }
    }

    private static class batchBuildCommodityPage_argsTupleScheme extends TupleScheme<batchBuildCommodityPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchBuildCommodityPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchBuildCommodityPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class batchBuildCommodityPage_result implements org.apache.thrift.TBase<batchBuildCommodityPage_result, batchBuildCommodityPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchBuildCommodityPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchBuildCommodityPage_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchBuildCommodityPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchBuildCommodityPage_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchBuildCommodityPage_result.class, metaDataMap);
    }

    public batchBuildCommodityPage_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchBuildCommodityPage_result(batchBuildCommodityPage_result other) {
    }

    public batchBuildCommodityPage_result deepCopy() {
      return new batchBuildCommodityPage_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchBuildCommodityPage_result)
        return this.equals((batchBuildCommodityPage_result)that);
      return false;
    }

    public boolean equals(batchBuildCommodityPage_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchBuildCommodityPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchBuildCommodityPage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchBuildCommodityPage_resultStandardSchemeFactory implements SchemeFactory {
      public batchBuildCommodityPage_resultStandardScheme getScheme() {
        return new batchBuildCommodityPage_resultStandardScheme();
      }
    }

    private static class batchBuildCommodityPage_resultStandardScheme extends StandardScheme<batchBuildCommodityPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchBuildCommodityPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchBuildCommodityPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchBuildCommodityPage_resultTupleSchemeFactory implements SchemeFactory {
      public batchBuildCommodityPage_resultTupleScheme getScheme() {
        return new batchBuildCommodityPage_resultTupleScheme();
      }
    }

    private static class batchBuildCommodityPage_resultTupleScheme extends TupleScheme<batchBuildCommodityPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchBuildCommodityPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchBuildCommodityPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getLeftTimeForSeckillCommodity_args implements org.apache.thrift.TBase<getLeftTimeForSeckillCommodity_args, getLeftTimeForSeckillCommodity_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLeftTimeForSeckillCommodity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLeftTimeForSeckillCommodity_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLeftTimeForSeckillCommodity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLeftTimeForSeckillCommodity_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLeftTimeForSeckillCommodity_args.class, metaDataMap);
    }

    public getLeftTimeForSeckillCommodity_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLeftTimeForSeckillCommodity_args(getLeftTimeForSeckillCommodity_args other) {
    }

    public getLeftTimeForSeckillCommodity_args deepCopy() {
      return new getLeftTimeForSeckillCommodity_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLeftTimeForSeckillCommodity_args)
        return this.equals((getLeftTimeForSeckillCommodity_args)that);
      return false;
    }

    public boolean equals(getLeftTimeForSeckillCommodity_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLeftTimeForSeckillCommodity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLeftTimeForSeckillCommodity_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLeftTimeForSeckillCommodity_argsStandardSchemeFactory implements SchemeFactory {
      public getLeftTimeForSeckillCommodity_argsStandardScheme getScheme() {
        return new getLeftTimeForSeckillCommodity_argsStandardScheme();
      }
    }

    private static class getLeftTimeForSeckillCommodity_argsStandardScheme extends StandardScheme<getLeftTimeForSeckillCommodity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLeftTimeForSeckillCommodity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLeftTimeForSeckillCommodity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLeftTimeForSeckillCommodity_argsTupleSchemeFactory implements SchemeFactory {
      public getLeftTimeForSeckillCommodity_argsTupleScheme getScheme() {
        return new getLeftTimeForSeckillCommodity_argsTupleScheme();
      }
    }

    private static class getLeftTimeForSeckillCommodity_argsTupleScheme extends TupleScheme<getLeftTimeForSeckillCommodity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLeftTimeForSeckillCommodity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLeftTimeForSeckillCommodity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getLeftTimeForSeckillCommodity_result implements org.apache.thrift.TBase<getLeftTimeForSeckillCommodity_result, getLeftTimeForSeckillCommodity_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLeftTimeForSeckillCommodity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLeftTimeForSeckillCommodity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLeftTimeForSeckillCommodity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLeftTimeForSeckillCommodity_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLeftTimeForSeckillCommodity_result.class, metaDataMap);
    }

    public getLeftTimeForSeckillCommodity_result() {
    }

    public getLeftTimeForSeckillCommodity_result(
      List<Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLeftTimeForSeckillCommodity_result(getLeftTimeForSeckillCommodity_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public getLeftTimeForSeckillCommodity_result deepCopy() {
      return new getLeftTimeForSeckillCommodity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public getLeftTimeForSeckillCommodity_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLeftTimeForSeckillCommodity_result)
        return this.equals((getLeftTimeForSeckillCommodity_result)that);
      return false;
    }

    public boolean equals(getLeftTimeForSeckillCommodity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLeftTimeForSeckillCommodity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLeftTimeForSeckillCommodity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLeftTimeForSeckillCommodity_resultStandardSchemeFactory implements SchemeFactory {
      public getLeftTimeForSeckillCommodity_resultStandardScheme getScheme() {
        return new getLeftTimeForSeckillCommodity_resultStandardScheme();
      }
    }

    private static class getLeftTimeForSeckillCommodity_resultStandardScheme extends StandardScheme<getLeftTimeForSeckillCommodity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLeftTimeForSeckillCommodity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list44.size);
                  for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                  {
                    Map<String,String> _elem46;
                    {
                      org.apache.thrift.protocol.TMap _map47 = iprot.readMapBegin();
                      _elem46 = new HashMap<String,String>(2*_map47.size);
                      for (int _i48 = 0; _i48 < _map47.size; ++_i48)
                      {
                        String _key49;
                        String _val50;
                        _key49 = iprot.readString();
                        _val50 = iprot.readString();
                        _elem46.put(_key49, _val50);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem46);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLeftTimeForSeckillCommodity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter51 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter51.size()));
                for (Map.Entry<String, String> _iter52 : _iter51.entrySet())
                {
                  oprot.writeString(_iter52.getKey());
                  oprot.writeString(_iter52.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLeftTimeForSeckillCommodity_resultTupleSchemeFactory implements SchemeFactory {
      public getLeftTimeForSeckillCommodity_resultTupleScheme getScheme() {
        return new getLeftTimeForSeckillCommodity_resultTupleScheme();
      }
    }

    private static class getLeftTimeForSeckillCommodity_resultTupleScheme extends TupleScheme<getLeftTimeForSeckillCommodity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLeftTimeForSeckillCommodity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter53 : struct.success)
            {
              {
                oprot.writeI32(_iter53.size());
                for (Map.Entry<String, String> _iter54 : _iter53.entrySet())
                {
                  oprot.writeString(_iter54.getKey());
                  oprot.writeString(_iter54.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLeftTimeForSeckillCommodity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list55.size);
            for (int _i56 = 0; _i56 < _list55.size; ++_i56)
            {
              Map<String,String> _elem57;
              {
                org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem57 = new HashMap<String,String>(2*_map58.size);
                for (int _i59 = 0; _i59 < _map58.size; ++_i59)
                {
                  String _key60;
                  String _val61;
                  _key60 = iprot.readString();
                  _val61 = iprot.readString();
                  _elem57.put(_key60, _val61);
                }
              }
              struct.success.add(_elem57);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class buildYmcPages_args implements org.apache.thrift.TBase<buildYmcPages_args, buildYmcPages_args._Fields>, java.io.Serializable, Cloneable, Comparable<buildYmcPages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buildYmcPages_args");

    private static final org.apache.thrift.protocol.TField BRAND_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("brandNo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATE_STRUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cateStructName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MERCHANT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buildYmcPages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buildYmcPages_argsTupleSchemeFactory());
    }

    public String brandNo; // required
    public String cateStructName; // required
    public String merchantCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BRAND_NO((short)1, "brandNo"),
      CATE_STRUCT_NAME((short)2, "cateStructName"),
      MERCHANT_CODE((short)3, "merchantCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BRAND_NO
            return BRAND_NO;
          case 2: // CATE_STRUCT_NAME
            return CATE_STRUCT_NAME;
          case 3: // MERCHANT_CODE
            return MERCHANT_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BRAND_NO, new org.apache.thrift.meta_data.FieldMetaData("brandNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATE_STRUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("cateStructName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MERCHANT_CODE, new org.apache.thrift.meta_data.FieldMetaData("merchantCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buildYmcPages_args.class, metaDataMap);
    }

    public buildYmcPages_args() {
    }

    public buildYmcPages_args(
      String brandNo,
      String cateStructName,
      String merchantCode)
    {
      this();
      this.brandNo = brandNo;
      this.cateStructName = cateStructName;
      this.merchantCode = merchantCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buildYmcPages_args(buildYmcPages_args other) {
      if (other.isSetBrandNo()) {
        this.brandNo = other.brandNo;
      }
      if (other.isSetCateStructName()) {
        this.cateStructName = other.cateStructName;
      }
      if (other.isSetMerchantCode()) {
        this.merchantCode = other.merchantCode;
      }
    }

    public buildYmcPages_args deepCopy() {
      return new buildYmcPages_args(this);
    }

    @Override
    public void clear() {
      this.brandNo = null;
      this.cateStructName = null;
      this.merchantCode = null;
    }

    public String getBrandNo() {
      return this.brandNo;
    }

    public buildYmcPages_args setBrandNo(String brandNo) {
      this.brandNo = brandNo;
      return this;
    }

    public void unsetBrandNo() {
      this.brandNo = null;
    }

    /** Returns true if field brandNo is set (has been assigned a value) and false otherwise */
    public boolean isSetBrandNo() {
      return this.brandNo != null;
    }

    public void setBrandNoIsSet(boolean value) {
      if (!value) {
        this.brandNo = null;
      }
    }

    public String getCateStructName() {
      return this.cateStructName;
    }

    public buildYmcPages_args setCateStructName(String cateStructName) {
      this.cateStructName = cateStructName;
      return this;
    }

    public void unsetCateStructName() {
      this.cateStructName = null;
    }

    /** Returns true if field cateStructName is set (has been assigned a value) and false otherwise */
    public boolean isSetCateStructName() {
      return this.cateStructName != null;
    }

    public void setCateStructNameIsSet(boolean value) {
      if (!value) {
        this.cateStructName = null;
      }
    }

    public String getMerchantCode() {
      return this.merchantCode;
    }

    public buildYmcPages_args setMerchantCode(String merchantCode) {
      this.merchantCode = merchantCode;
      return this;
    }

    public void unsetMerchantCode() {
      this.merchantCode = null;
    }

    /** Returns true if field merchantCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantCode() {
      return this.merchantCode != null;
    }

    public void setMerchantCodeIsSet(boolean value) {
      if (!value) {
        this.merchantCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BRAND_NO:
        if (value == null) {
          unsetBrandNo();
        } else {
          setBrandNo((String)value);
        }
        break;

      case CATE_STRUCT_NAME:
        if (value == null) {
          unsetCateStructName();
        } else {
          setCateStructName((String)value);
        }
        break;

      case MERCHANT_CODE:
        if (value == null) {
          unsetMerchantCode();
        } else {
          setMerchantCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BRAND_NO:
        return getBrandNo();

      case CATE_STRUCT_NAME:
        return getCateStructName();

      case MERCHANT_CODE:
        return getMerchantCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BRAND_NO:
        return isSetBrandNo();
      case CATE_STRUCT_NAME:
        return isSetCateStructName();
      case MERCHANT_CODE:
        return isSetMerchantCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buildYmcPages_args)
        return this.equals((buildYmcPages_args)that);
      return false;
    }

    public boolean equals(buildYmcPages_args that) {
      if (that == null)
        return false;

      boolean this_present_brandNo = true && this.isSetBrandNo();
      boolean that_present_brandNo = true && that.isSetBrandNo();
      if (this_present_brandNo || that_present_brandNo) {
        if (!(this_present_brandNo && that_present_brandNo))
          return false;
        if (!this.brandNo.equals(that.brandNo))
          return false;
      }

      boolean this_present_cateStructName = true && this.isSetCateStructName();
      boolean that_present_cateStructName = true && that.isSetCateStructName();
      if (this_present_cateStructName || that_present_cateStructName) {
        if (!(this_present_cateStructName && that_present_cateStructName))
          return false;
        if (!this.cateStructName.equals(that.cateStructName))
          return false;
      }

      boolean this_present_merchantCode = true && this.isSetMerchantCode();
      boolean that_present_merchantCode = true && that.isSetMerchantCode();
      if (this_present_merchantCode || that_present_merchantCode) {
        if (!(this_present_merchantCode && that_present_merchantCode))
          return false;
        if (!this.merchantCode.equals(that.merchantCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(buildYmcPages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBrandNo()).compareTo(other.isSetBrandNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBrandNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandNo, other.brandNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCateStructName()).compareTo(other.isSetCateStructName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCateStructName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cateStructName, other.cateStructName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantCode()).compareTo(other.isSetMerchantCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCode, other.merchantCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buildYmcPages_args(");
      boolean first = true;

      sb.append("brandNo:");
      if (this.brandNo == null) {
        sb.append("null");
      } else {
        sb.append(this.brandNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cateStructName:");
      if (this.cateStructName == null) {
        sb.append("null");
      } else {
        sb.append(this.cateStructName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantCode:");
      if (this.merchantCode == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buildYmcPages_argsStandardSchemeFactory implements SchemeFactory {
      public buildYmcPages_argsStandardScheme getScheme() {
        return new buildYmcPages_argsStandardScheme();
      }
    }

    private static class buildYmcPages_argsStandardScheme extends StandardScheme<buildYmcPages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buildYmcPages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BRAND_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.brandNo = iprot.readString();
                struct.setBrandNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATE_STRUCT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cateStructName = iprot.readString();
                struct.setCateStructNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MERCHANT_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantCode = iprot.readString();
                struct.setMerchantCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buildYmcPages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.brandNo != null) {
          oprot.writeFieldBegin(BRAND_NO_FIELD_DESC);
          oprot.writeString(struct.brandNo);
          oprot.writeFieldEnd();
        }
        if (struct.cateStructName != null) {
          oprot.writeFieldBegin(CATE_STRUCT_NAME_FIELD_DESC);
          oprot.writeString(struct.cateStructName);
          oprot.writeFieldEnd();
        }
        if (struct.merchantCode != null) {
          oprot.writeFieldBegin(MERCHANT_CODE_FIELD_DESC);
          oprot.writeString(struct.merchantCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buildYmcPages_argsTupleSchemeFactory implements SchemeFactory {
      public buildYmcPages_argsTupleScheme getScheme() {
        return new buildYmcPages_argsTupleScheme();
      }
    }

    private static class buildYmcPages_argsTupleScheme extends TupleScheme<buildYmcPages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buildYmcPages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBrandNo()) {
          optionals.set(0);
        }
        if (struct.isSetCateStructName()) {
          optionals.set(1);
        }
        if (struct.isSetMerchantCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBrandNo()) {
          oprot.writeString(struct.brandNo);
        }
        if (struct.isSetCateStructName()) {
          oprot.writeString(struct.cateStructName);
        }
        if (struct.isSetMerchantCode()) {
          oprot.writeString(struct.merchantCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buildYmcPages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.brandNo = iprot.readString();
          struct.setBrandNoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cateStructName = iprot.readString();
          struct.setCateStructNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.merchantCode = iprot.readString();
          struct.setMerchantCodeIsSet(true);
        }
      }
    }

  }

  public static class buildYmcPages_result implements org.apache.thrift.TBase<buildYmcPages_result, buildYmcPages_result._Fields>, java.io.Serializable, Cloneable, Comparable<buildYmcPages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buildYmcPages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buildYmcPages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buildYmcPages_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buildYmcPages_result.class, metaDataMap);
    }

    public buildYmcPages_result() {
    }

    public buildYmcPages_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buildYmcPages_result(buildYmcPages_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public buildYmcPages_result deepCopy() {
      return new buildYmcPages_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public buildYmcPages_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buildYmcPages_result)
        return this.equals((buildYmcPages_result)that);
      return false;
    }

    public boolean equals(buildYmcPages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(buildYmcPages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buildYmcPages_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buildYmcPages_resultStandardSchemeFactory implements SchemeFactory {
      public buildYmcPages_resultStandardScheme getScheme() {
        return new buildYmcPages_resultStandardScheme();
      }
    }

    private static class buildYmcPages_resultStandardScheme extends StandardScheme<buildYmcPages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buildYmcPages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buildYmcPages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buildYmcPages_resultTupleSchemeFactory implements SchemeFactory {
      public buildYmcPages_resultTupleScheme getScheme() {
        return new buildYmcPages_resultTupleScheme();
      }
    }

    private static class buildYmcPages_resultTupleScheme extends TupleScheme<buildYmcPages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buildYmcPages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buildYmcPages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class buildYmcPagesByParams_args implements org.apache.thrift.TBase<buildYmcPagesByParams_args, buildYmcPagesByParams_args._Fields>, java.io.Serializable, Cloneable, Comparable<buildYmcPagesByParams_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buildYmcPagesByParams_args");

    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buildYmcPagesByParams_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buildYmcPagesByParams_argsTupleSchemeFactory());
    }

    public Map<String,String> option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPTION((short)1, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buildYmcPagesByParams_args.class, metaDataMap);
    }

    public buildYmcPagesByParams_args() {
    }

    public buildYmcPagesByParams_args(
      Map<String,String> option)
    {
      this();
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buildYmcPagesByParams_args(buildYmcPagesByParams_args other) {
      if (other.isSetOption()) {
        Map<String,String> __this__option = new HashMap<String,String>(other.option);
        this.option = __this__option;
      }
    }

    public buildYmcPagesByParams_args deepCopy() {
      return new buildYmcPagesByParams_args(this);
    }

    @Override
    public void clear() {
      this.option = null;
    }

    public int getOptionSize() {
      return (this.option == null) ? 0 : this.option.size();
    }

    public void putToOption(String key, String val) {
      if (this.option == null) {
        this.option = new HashMap<String,String>();
      }
      this.option.put(key, val);
    }

    public Map<String,String> getOption() {
      return this.option;
    }

    public buildYmcPagesByParams_args setOption(Map<String,String> option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buildYmcPagesByParams_args)
        return this.equals((buildYmcPagesByParams_args)that);
      return false;
    }

    public boolean equals(buildYmcPagesByParams_args that) {
      if (that == null)
        return false;

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(buildYmcPagesByParams_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buildYmcPagesByParams_args(");
      boolean first = true;

      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buildYmcPagesByParams_argsStandardSchemeFactory implements SchemeFactory {
      public buildYmcPagesByParams_argsStandardScheme getScheme() {
        return new buildYmcPagesByParams_argsStandardScheme();
      }
    }

    private static class buildYmcPagesByParams_argsStandardScheme extends StandardScheme<buildYmcPagesByParams_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buildYmcPagesByParams_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map62 = iprot.readMapBegin();
                  struct.option = new HashMap<String,String>(2*_map62.size);
                  for (int _i63 = 0; _i63 < _map62.size; ++_i63)
                  {
                    String _key64;
                    String _val65;
                    _key64 = iprot.readString();
                    _val65 = iprot.readString();
                    struct.option.put(_key64, _val65);
                  }
                  iprot.readMapEnd();
                }
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buildYmcPagesByParams_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.option.size()));
            for (Map.Entry<String, String> _iter66 : struct.option.entrySet())
            {
              oprot.writeString(_iter66.getKey());
              oprot.writeString(_iter66.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buildYmcPagesByParams_argsTupleSchemeFactory implements SchemeFactory {
      public buildYmcPagesByParams_argsTupleScheme getScheme() {
        return new buildYmcPagesByParams_argsTupleScheme();
      }
    }

    private static class buildYmcPagesByParams_argsTupleScheme extends TupleScheme<buildYmcPagesByParams_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buildYmcPagesByParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOption()) {
          {
            oprot.writeI32(struct.option.size());
            for (Map.Entry<String, String> _iter67 : struct.option.entrySet())
            {
              oprot.writeString(_iter67.getKey());
              oprot.writeString(_iter67.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buildYmcPagesByParams_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map68 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.option = new HashMap<String,String>(2*_map68.size);
            for (int _i69 = 0; _i69 < _map68.size; ++_i69)
            {
              String _key70;
              String _val71;
              _key70 = iprot.readString();
              _val71 = iprot.readString();
              struct.option.put(_key70, _val71);
            }
          }
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class buildYmcPagesByParams_result implements org.apache.thrift.TBase<buildYmcPagesByParams_result, buildYmcPagesByParams_result._Fields>, java.io.Serializable, Cloneable, Comparable<buildYmcPagesByParams_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buildYmcPagesByParams_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buildYmcPagesByParams_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buildYmcPagesByParams_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buildYmcPagesByParams_result.class, metaDataMap);
    }

    public buildYmcPagesByParams_result() {
    }

    public buildYmcPagesByParams_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buildYmcPagesByParams_result(buildYmcPagesByParams_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public buildYmcPagesByParams_result deepCopy() {
      return new buildYmcPagesByParams_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public buildYmcPagesByParams_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buildYmcPagesByParams_result)
        return this.equals((buildYmcPagesByParams_result)that);
      return false;
    }

    public boolean equals(buildYmcPagesByParams_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(buildYmcPagesByParams_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buildYmcPagesByParams_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buildYmcPagesByParams_resultStandardSchemeFactory implements SchemeFactory {
      public buildYmcPagesByParams_resultStandardScheme getScheme() {
        return new buildYmcPagesByParams_resultStandardScheme();
      }
    }

    private static class buildYmcPagesByParams_resultStandardScheme extends StandardScheme<buildYmcPagesByParams_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buildYmcPagesByParams_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buildYmcPagesByParams_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buildYmcPagesByParams_resultTupleSchemeFactory implements SchemeFactory {
      public buildYmcPagesByParams_resultTupleScheme getScheme() {
        return new buildYmcPagesByParams_resultTupleScheme();
      }
    }

    private static class buildYmcPagesByParams_resultTupleScheme extends TupleScheme<buildYmcPagesByParams_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buildYmcPagesByParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buildYmcPagesByParams_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBrandKeywords_args implements org.apache.thrift.TBase<getBrandKeywords_args, getBrandKeywords_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBrandKeywords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBrandKeywords_args");

    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBrandKeywords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBrandKeywords_argsTupleSchemeFactory());
    }

    public Map<String,String> option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPTION((short)1, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBrandKeywords_args.class, metaDataMap);
    }

    public getBrandKeywords_args() {
    }

    public getBrandKeywords_args(
      Map<String,String> option)
    {
      this();
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBrandKeywords_args(getBrandKeywords_args other) {
      if (other.isSetOption()) {
        Map<String,String> __this__option = new HashMap<String,String>(other.option);
        this.option = __this__option;
      }
    }

    public getBrandKeywords_args deepCopy() {
      return new getBrandKeywords_args(this);
    }

    @Override
    public void clear() {
      this.option = null;
    }

    public int getOptionSize() {
      return (this.option == null) ? 0 : this.option.size();
    }

    public void putToOption(String key, String val) {
      if (this.option == null) {
        this.option = new HashMap<String,String>();
      }
      this.option.put(key, val);
    }

    public Map<String,String> getOption() {
      return this.option;
    }

    public getBrandKeywords_args setOption(Map<String,String> option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBrandKeywords_args)
        return this.equals((getBrandKeywords_args)that);
      return false;
    }

    public boolean equals(getBrandKeywords_args that) {
      if (that == null)
        return false;

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBrandKeywords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBrandKeywords_args(");
      boolean first = true;

      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBrandKeywords_argsStandardSchemeFactory implements SchemeFactory {
      public getBrandKeywords_argsStandardScheme getScheme() {
        return new getBrandKeywords_argsStandardScheme();
      }
    }

    private static class getBrandKeywords_argsStandardScheme extends StandardScheme<getBrandKeywords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBrandKeywords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map72 = iprot.readMapBegin();
                  struct.option = new HashMap<String,String>(2*_map72.size);
                  for (int _i73 = 0; _i73 < _map72.size; ++_i73)
                  {
                    String _key74;
                    String _val75;
                    _key74 = iprot.readString();
                    _val75 = iprot.readString();
                    struct.option.put(_key74, _val75);
                  }
                  iprot.readMapEnd();
                }
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBrandKeywords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.option.size()));
            for (Map.Entry<String, String> _iter76 : struct.option.entrySet())
            {
              oprot.writeString(_iter76.getKey());
              oprot.writeString(_iter76.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBrandKeywords_argsTupleSchemeFactory implements SchemeFactory {
      public getBrandKeywords_argsTupleScheme getScheme() {
        return new getBrandKeywords_argsTupleScheme();
      }
    }

    private static class getBrandKeywords_argsTupleScheme extends TupleScheme<getBrandKeywords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBrandKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOption()) {
          {
            oprot.writeI32(struct.option.size());
            for (Map.Entry<String, String> _iter77 : struct.option.entrySet())
            {
              oprot.writeString(_iter77.getKey());
              oprot.writeString(_iter77.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBrandKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map78 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.option = new HashMap<String,String>(2*_map78.size);
            for (int _i79 = 0; _i79 < _map78.size; ++_i79)
            {
              String _key80;
              String _val81;
              _key80 = iprot.readString();
              _val81 = iprot.readString();
              struct.option.put(_key80, _val81);
            }
          }
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class getBrandKeywords_result implements org.apache.thrift.TBase<getBrandKeywords_result, getBrandKeywords_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBrandKeywords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBrandKeywords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBrandKeywords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBrandKeywords_resultTupleSchemeFactory());
    }

    public Map<String,List<Map<String,String>>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBrandKeywords_result.class, metaDataMap);
    }

    public getBrandKeywords_result() {
    }

    public getBrandKeywords_result(
      Map<String,List<Map<String,String>>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBrandKeywords_result(getBrandKeywords_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<Map<String,String>>> __this__success = new HashMap<String,List<Map<String,String>>>(other.success.size());
        for (Map.Entry<String, List<Map<String,String>>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Map<String,String>> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<Map<String,String>> __this__success_copy_value = new ArrayList<Map<String,String>>(other_element_value.size());
          for (Map<String,String> other_element_value_element : other_element_value) {
            Map<String,String> __this__success_copy_value_copy = new HashMap<String,String>(other_element_value_element);
            __this__success_copy_value.add(__this__success_copy_value_copy);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getBrandKeywords_result deepCopy() {
      return new getBrandKeywords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<Map<String,String>> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<Map<String,String>>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<Map<String,String>>> getSuccess() {
      return this.success;
    }

    public getBrandKeywords_result setSuccess(Map<String,List<Map<String,String>>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<Map<String,String>>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBrandKeywords_result)
        return this.equals((getBrandKeywords_result)that);
      return false;
    }

    public boolean equals(getBrandKeywords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBrandKeywords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBrandKeywords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBrandKeywords_resultStandardSchemeFactory implements SchemeFactory {
      public getBrandKeywords_resultStandardScheme getScheme() {
        return new getBrandKeywords_resultStandardScheme();
      }
    }

    private static class getBrandKeywords_resultStandardScheme extends StandardScheme<getBrandKeywords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBrandKeywords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map82 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<Map<String,String>>>(2*_map82.size);
                  for (int _i83 = 0; _i83 < _map82.size; ++_i83)
                  {
                    String _key84;
                    List<Map<String,String>> _val85;
                    _key84 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                      _val85 = new ArrayList<Map<String,String>>(_list86.size);
                      for (int _i87 = 0; _i87 < _list86.size; ++_i87)
                      {
                        Map<String,String> _elem88;
                        {
                          org.apache.thrift.protocol.TMap _map89 = iprot.readMapBegin();
                          _elem88 = new HashMap<String,String>(2*_map89.size);
                          for (int _i90 = 0; _i90 < _map89.size; ++_i90)
                          {
                            String _key91;
                            String _val92;
                            _key91 = iprot.readString();
                            _val92 = iprot.readString();
                            _elem88.put(_key91, _val92);
                          }
                          iprot.readMapEnd();
                        }
                        _val85.add(_elem88);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key84, _val85);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBrandKeywords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<Map<String,String>>> _iter93 : struct.success.entrySet())
            {
              oprot.writeString(_iter93.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter93.getValue().size()));
                for (Map<String,String> _iter94 : _iter93.getValue())
                {
                  {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter94.size()));
                    for (Map.Entry<String, String> _iter95 : _iter94.entrySet())
                    {
                      oprot.writeString(_iter95.getKey());
                      oprot.writeString(_iter95.getValue());
                    }
                    oprot.writeMapEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBrandKeywords_resultTupleSchemeFactory implements SchemeFactory {
      public getBrandKeywords_resultTupleScheme getScheme() {
        return new getBrandKeywords_resultTupleScheme();
      }
    }

    private static class getBrandKeywords_resultTupleScheme extends TupleScheme<getBrandKeywords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBrandKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<Map<String,String>>> _iter96 : struct.success.entrySet())
            {
              oprot.writeString(_iter96.getKey());
              {
                oprot.writeI32(_iter96.getValue().size());
                for (Map<String,String> _iter97 : _iter96.getValue())
                {
                  {
                    oprot.writeI32(_iter97.size());
                    for (Map.Entry<String, String> _iter98 : _iter97.entrySet())
                    {
                      oprot.writeString(_iter98.getKey());
                      oprot.writeString(_iter98.getValue());
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBrandKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map99 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<Map<String,String>>>(2*_map99.size);
            for (int _i100 = 0; _i100 < _map99.size; ++_i100)
            {
              String _key101;
              List<Map<String,String>> _val102;
              _key101 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                _val102 = new ArrayList<Map<String,String>>(_list103.size);
                for (int _i104 = 0; _i104 < _list103.size; ++_i104)
                {
                  Map<String,String> _elem105;
                  {
                    org.apache.thrift.protocol.TMap _map106 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    _elem105 = new HashMap<String,String>(2*_map106.size);
                    for (int _i107 = 0; _i107 < _map106.size; ++_i107)
                    {
                      String _key108;
                      String _val109;
                      _key108 = iprot.readString();
                      _val109 = iprot.readString();
                      _elem105.put(_key108, _val109);
                    }
                  }
                  _val102.add(_elem105);
                }
              }
              struct.success.put(_key101, _val102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllBrandKeywords_args implements org.apache.thrift.TBase<getAllBrandKeywords_args, getAllBrandKeywords_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllBrandKeywords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllBrandKeywords_args");

    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllBrandKeywords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllBrandKeywords_argsTupleSchemeFactory());
    }

    public Map<String,String> option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPTION((short)1, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllBrandKeywords_args.class, metaDataMap);
    }

    public getAllBrandKeywords_args() {
    }

    public getAllBrandKeywords_args(
      Map<String,String> option)
    {
      this();
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllBrandKeywords_args(getAllBrandKeywords_args other) {
      if (other.isSetOption()) {
        Map<String,String> __this__option = new HashMap<String,String>(other.option);
        this.option = __this__option;
      }
    }

    public getAllBrandKeywords_args deepCopy() {
      return new getAllBrandKeywords_args(this);
    }

    @Override
    public void clear() {
      this.option = null;
    }

    public int getOptionSize() {
      return (this.option == null) ? 0 : this.option.size();
    }

    public void putToOption(String key, String val) {
      if (this.option == null) {
        this.option = new HashMap<String,String>();
      }
      this.option.put(key, val);
    }

    public Map<String,String> getOption() {
      return this.option;
    }

    public getAllBrandKeywords_args setOption(Map<String,String> option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllBrandKeywords_args)
        return this.equals((getAllBrandKeywords_args)that);
      return false;
    }

    public boolean equals(getAllBrandKeywords_args that) {
      if (that == null)
        return false;

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllBrandKeywords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllBrandKeywords_args(");
      boolean first = true;

      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllBrandKeywords_argsStandardSchemeFactory implements SchemeFactory {
      public getAllBrandKeywords_argsStandardScheme getScheme() {
        return new getAllBrandKeywords_argsStandardScheme();
      }
    }

    private static class getAllBrandKeywords_argsStandardScheme extends StandardScheme<getAllBrandKeywords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllBrandKeywords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map110 = iprot.readMapBegin();
                  struct.option = new HashMap<String,String>(2*_map110.size);
                  for (int _i111 = 0; _i111 < _map110.size; ++_i111)
                  {
                    String _key112;
                    String _val113;
                    _key112 = iprot.readString();
                    _val113 = iprot.readString();
                    struct.option.put(_key112, _val113);
                  }
                  iprot.readMapEnd();
                }
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllBrandKeywords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.option.size()));
            for (Map.Entry<String, String> _iter114 : struct.option.entrySet())
            {
              oprot.writeString(_iter114.getKey());
              oprot.writeString(_iter114.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllBrandKeywords_argsTupleSchemeFactory implements SchemeFactory {
      public getAllBrandKeywords_argsTupleScheme getScheme() {
        return new getAllBrandKeywords_argsTupleScheme();
      }
    }

    private static class getAllBrandKeywords_argsTupleScheme extends TupleScheme<getAllBrandKeywords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllBrandKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOption()) {
          {
            oprot.writeI32(struct.option.size());
            for (Map.Entry<String, String> _iter115 : struct.option.entrySet())
            {
              oprot.writeString(_iter115.getKey());
              oprot.writeString(_iter115.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllBrandKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map116 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.option = new HashMap<String,String>(2*_map116.size);
            for (int _i117 = 0; _i117 < _map116.size; ++_i117)
            {
              String _key118;
              String _val119;
              _key118 = iprot.readString();
              _val119 = iprot.readString();
              struct.option.put(_key118, _val119);
            }
          }
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class getAllBrandKeywords_result implements org.apache.thrift.TBase<getAllBrandKeywords_result, getAllBrandKeywords_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllBrandKeywords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllBrandKeywords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllBrandKeywords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllBrandKeywords_resultTupleSchemeFactory());
    }

    public Map<String,Map<String,List<Map<String,String>>>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllBrandKeywords_result.class, metaDataMap);
    }

    public getAllBrandKeywords_result() {
    }

    public getAllBrandKeywords_result(
      Map<String,Map<String,List<Map<String,String>>>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllBrandKeywords_result(getAllBrandKeywords_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<String,List<Map<String,String>>>> __this__success = new HashMap<String,Map<String,List<Map<String,String>>>>(other.success.size());
        for (Map.Entry<String, Map<String,List<Map<String,String>>>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<String,List<Map<String,String>>> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<String,List<Map<String,String>>> __this__success_copy_value = new HashMap<String,List<Map<String,String>>>(other_element_value.size());
          for (Map.Entry<String, List<Map<String,String>>> other_element_value_element : other_element_value.entrySet()) {

            String other_element_value_element_key = other_element_value_element.getKey();
            List<Map<String,String>> other_element_value_element_value = other_element_value_element.getValue();

            String __this__success_copy_value_copy_key = other_element_value_element_key;

            List<Map<String,String>> __this__success_copy_value_copy_value = new ArrayList<Map<String,String>>(other_element_value_element_value.size());
            for (Map<String,String> other_element_value_element_value_element : other_element_value_element_value) {
              Map<String,String> __this__success_copy_value_copy_value_copy = new HashMap<String,String>(other_element_value_element_value_element);
              __this__success_copy_value_copy_value.add(__this__success_copy_value_copy_value_copy);
            }

            __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getAllBrandKeywords_result deepCopy() {
      return new getAllBrandKeywords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<String,List<Map<String,String>>> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<String,List<Map<String,String>>>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<String,List<Map<String,String>>>> getSuccess() {
      return this.success;
    }

    public getAllBrandKeywords_result setSuccess(Map<String,Map<String,List<Map<String,String>>>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<String,List<Map<String,String>>>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllBrandKeywords_result)
        return this.equals((getAllBrandKeywords_result)that);
      return false;
    }

    public boolean equals(getAllBrandKeywords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllBrandKeywords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllBrandKeywords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllBrandKeywords_resultStandardSchemeFactory implements SchemeFactory {
      public getAllBrandKeywords_resultStandardScheme getScheme() {
        return new getAllBrandKeywords_resultStandardScheme();
      }
    }

    private static class getAllBrandKeywords_resultStandardScheme extends StandardScheme<getAllBrandKeywords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllBrandKeywords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<String,List<Map<String,String>>>>(2*_map120.size);
                  for (int _i121 = 0; _i121 < _map120.size; ++_i121)
                  {
                    String _key122;
                    Map<String,List<Map<String,String>>> _val123;
                    _key122 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map124 = iprot.readMapBegin();
                      _val123 = new HashMap<String,List<Map<String,String>>>(2*_map124.size);
                      for (int _i125 = 0; _i125 < _map124.size; ++_i125)
                      {
                        String _key126;
                        List<Map<String,String>> _val127;
                        _key126 = iprot.readString();
                        {
                          org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                          _val127 = new ArrayList<Map<String,String>>(_list128.size);
                          for (int _i129 = 0; _i129 < _list128.size; ++_i129)
                          {
                            Map<String,String> _elem130;
                            {
                              org.apache.thrift.protocol.TMap _map131 = iprot.readMapBegin();
                              _elem130 = new HashMap<String,String>(2*_map131.size);
                              for (int _i132 = 0; _i132 < _map131.size; ++_i132)
                              {
                                String _key133;
                                String _val134;
                                _key133 = iprot.readString();
                                _val134 = iprot.readString();
                                _elem130.put(_key133, _val134);
                              }
                              iprot.readMapEnd();
                            }
                            _val127.add(_elem130);
                          }
                          iprot.readListEnd();
                        }
                        _val123.put(_key126, _val127);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key122, _val123);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllBrandKeywords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<String,List<Map<String,String>>>> _iter135 : struct.success.entrySet())
            {
              oprot.writeString(_iter135.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, _iter135.getValue().size()));
                for (Map.Entry<String, List<Map<String,String>>> _iter136 : _iter135.getValue().entrySet())
                {
                  oprot.writeString(_iter136.getKey());
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter136.getValue().size()));
                    for (Map<String,String> _iter137 : _iter136.getValue())
                    {
                      {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter137.size()));
                        for (Map.Entry<String, String> _iter138 : _iter137.entrySet())
                        {
                          oprot.writeString(_iter138.getKey());
                          oprot.writeString(_iter138.getValue());
                        }
                        oprot.writeMapEnd();
                      }
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllBrandKeywords_resultTupleSchemeFactory implements SchemeFactory {
      public getAllBrandKeywords_resultTupleScheme getScheme() {
        return new getAllBrandKeywords_resultTupleScheme();
      }
    }

    private static class getAllBrandKeywords_resultTupleScheme extends TupleScheme<getAllBrandKeywords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllBrandKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<String,List<Map<String,String>>>> _iter139 : struct.success.entrySet())
            {
              oprot.writeString(_iter139.getKey());
              {
                oprot.writeI32(_iter139.getValue().size());
                for (Map.Entry<String, List<Map<String,String>>> _iter140 : _iter139.getValue().entrySet())
                {
                  oprot.writeString(_iter140.getKey());
                  {
                    oprot.writeI32(_iter140.getValue().size());
                    for (Map<String,String> _iter141 : _iter140.getValue())
                    {
                      {
                        oprot.writeI32(_iter141.size());
                        for (Map.Entry<String, String> _iter142 : _iter141.entrySet())
                        {
                          oprot.writeString(_iter142.getKey());
                          oprot.writeString(_iter142.getValue());
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllBrandKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map143 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<String,List<Map<String,String>>>>(2*_map143.size);
            for (int _i144 = 0; _i144 < _map143.size; ++_i144)
            {
              String _key145;
              Map<String,List<Map<String,String>>> _val146;
              _key145 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map147 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                _val146 = new HashMap<String,List<Map<String,String>>>(2*_map147.size);
                for (int _i148 = 0; _i148 < _map147.size; ++_i148)
                {
                  String _key149;
                  List<Map<String,String>> _val150;
                  _key149 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                    _val150 = new ArrayList<Map<String,String>>(_list151.size);
                    for (int _i152 = 0; _i152 < _list151.size; ++_i152)
                    {
                      Map<String,String> _elem153;
                      {
                        org.apache.thrift.protocol.TMap _map154 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        _elem153 = new HashMap<String,String>(2*_map154.size);
                        for (int _i155 = 0; _i155 < _map154.size; ++_i155)
                        {
                          String _key156;
                          String _val157;
                          _key156 = iprot.readString();
                          _val157 = iprot.readString();
                          _elem153.put(_key156, _val157);
                        }
                      }
                      _val150.add(_elem153);
                    }
                  }
                  _val146.put(_key149, _val150);
                }
              }
              struct.success.put(_key145, _val146);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCategoryKeywords_args implements org.apache.thrift.TBase<getCategoryKeywords_args, getCategoryKeywords_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCategoryKeywords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategoryKeywords_args");

    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCategoryKeywords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCategoryKeywords_argsTupleSchemeFactory());
    }

    public Map<String,String> option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPTION((short)1, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategoryKeywords_args.class, metaDataMap);
    }

    public getCategoryKeywords_args() {
    }

    public getCategoryKeywords_args(
      Map<String,String> option)
    {
      this();
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategoryKeywords_args(getCategoryKeywords_args other) {
      if (other.isSetOption()) {
        Map<String,String> __this__option = new HashMap<String,String>(other.option);
        this.option = __this__option;
      }
    }

    public getCategoryKeywords_args deepCopy() {
      return new getCategoryKeywords_args(this);
    }

    @Override
    public void clear() {
      this.option = null;
    }

    public int getOptionSize() {
      return (this.option == null) ? 0 : this.option.size();
    }

    public void putToOption(String key, String val) {
      if (this.option == null) {
        this.option = new HashMap<String,String>();
      }
      this.option.put(key, val);
    }

    public Map<String,String> getOption() {
      return this.option;
    }

    public getCategoryKeywords_args setOption(Map<String,String> option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategoryKeywords_args)
        return this.equals((getCategoryKeywords_args)that);
      return false;
    }

    public boolean equals(getCategoryKeywords_args that) {
      if (that == null)
        return false;

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCategoryKeywords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategoryKeywords_args(");
      boolean first = true;

      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCategoryKeywords_argsStandardSchemeFactory implements SchemeFactory {
      public getCategoryKeywords_argsStandardScheme getScheme() {
        return new getCategoryKeywords_argsStandardScheme();
      }
    }

    private static class getCategoryKeywords_argsStandardScheme extends StandardScheme<getCategoryKeywords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCategoryKeywords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map158 = iprot.readMapBegin();
                  struct.option = new HashMap<String,String>(2*_map158.size);
                  for (int _i159 = 0; _i159 < _map158.size; ++_i159)
                  {
                    String _key160;
                    String _val161;
                    _key160 = iprot.readString();
                    _val161 = iprot.readString();
                    struct.option.put(_key160, _val161);
                  }
                  iprot.readMapEnd();
                }
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCategoryKeywords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.option.size()));
            for (Map.Entry<String, String> _iter162 : struct.option.entrySet())
            {
              oprot.writeString(_iter162.getKey());
              oprot.writeString(_iter162.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCategoryKeywords_argsTupleSchemeFactory implements SchemeFactory {
      public getCategoryKeywords_argsTupleScheme getScheme() {
        return new getCategoryKeywords_argsTupleScheme();
      }
    }

    private static class getCategoryKeywords_argsTupleScheme extends TupleScheme<getCategoryKeywords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCategoryKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOption()) {
          {
            oprot.writeI32(struct.option.size());
            for (Map.Entry<String, String> _iter163 : struct.option.entrySet())
            {
              oprot.writeString(_iter163.getKey());
              oprot.writeString(_iter163.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCategoryKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map164 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.option = new HashMap<String,String>(2*_map164.size);
            for (int _i165 = 0; _i165 < _map164.size; ++_i165)
            {
              String _key166;
              String _val167;
              _key166 = iprot.readString();
              _val167 = iprot.readString();
              struct.option.put(_key166, _val167);
            }
          }
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class getCategoryKeywords_result implements org.apache.thrift.TBase<getCategoryKeywords_result, getCategoryKeywords_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCategoryKeywords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCategoryKeywords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCategoryKeywords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCategoryKeywords_resultTupleSchemeFactory());
    }

    public Map<String,List<Map<String,String>>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategoryKeywords_result.class, metaDataMap);
    }

    public getCategoryKeywords_result() {
    }

    public getCategoryKeywords_result(
      Map<String,List<Map<String,String>>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCategoryKeywords_result(getCategoryKeywords_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<Map<String,String>>> __this__success = new HashMap<String,List<Map<String,String>>>(other.success.size());
        for (Map.Entry<String, List<Map<String,String>>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Map<String,String>> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<Map<String,String>> __this__success_copy_value = new ArrayList<Map<String,String>>(other_element_value.size());
          for (Map<String,String> other_element_value_element : other_element_value) {
            Map<String,String> __this__success_copy_value_copy = new HashMap<String,String>(other_element_value_element);
            __this__success_copy_value.add(__this__success_copy_value_copy);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getCategoryKeywords_result deepCopy() {
      return new getCategoryKeywords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<Map<String,String>> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<Map<String,String>>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<Map<String,String>>> getSuccess() {
      return this.success;
    }

    public getCategoryKeywords_result setSuccess(Map<String,List<Map<String,String>>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<Map<String,String>>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCategoryKeywords_result)
        return this.equals((getCategoryKeywords_result)that);
      return false;
    }

    public boolean equals(getCategoryKeywords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCategoryKeywords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCategoryKeywords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCategoryKeywords_resultStandardSchemeFactory implements SchemeFactory {
      public getCategoryKeywords_resultStandardScheme getScheme() {
        return new getCategoryKeywords_resultStandardScheme();
      }
    }

    private static class getCategoryKeywords_resultStandardScheme extends StandardScheme<getCategoryKeywords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCategoryKeywords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map168 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<Map<String,String>>>(2*_map168.size);
                  for (int _i169 = 0; _i169 < _map168.size; ++_i169)
                  {
                    String _key170;
                    List<Map<String,String>> _val171;
                    _key170 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                      _val171 = new ArrayList<Map<String,String>>(_list172.size);
                      for (int _i173 = 0; _i173 < _list172.size; ++_i173)
                      {
                        Map<String,String> _elem174;
                        {
                          org.apache.thrift.protocol.TMap _map175 = iprot.readMapBegin();
                          _elem174 = new HashMap<String,String>(2*_map175.size);
                          for (int _i176 = 0; _i176 < _map175.size; ++_i176)
                          {
                            String _key177;
                            String _val178;
                            _key177 = iprot.readString();
                            _val178 = iprot.readString();
                            _elem174.put(_key177, _val178);
                          }
                          iprot.readMapEnd();
                        }
                        _val171.add(_elem174);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key170, _val171);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCategoryKeywords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<Map<String,String>>> _iter179 : struct.success.entrySet())
            {
              oprot.writeString(_iter179.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter179.getValue().size()));
                for (Map<String,String> _iter180 : _iter179.getValue())
                {
                  {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter180.size()));
                    for (Map.Entry<String, String> _iter181 : _iter180.entrySet())
                    {
                      oprot.writeString(_iter181.getKey());
                      oprot.writeString(_iter181.getValue());
                    }
                    oprot.writeMapEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCategoryKeywords_resultTupleSchemeFactory implements SchemeFactory {
      public getCategoryKeywords_resultTupleScheme getScheme() {
        return new getCategoryKeywords_resultTupleScheme();
      }
    }

    private static class getCategoryKeywords_resultTupleScheme extends TupleScheme<getCategoryKeywords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCategoryKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<Map<String,String>>> _iter182 : struct.success.entrySet())
            {
              oprot.writeString(_iter182.getKey());
              {
                oprot.writeI32(_iter182.getValue().size());
                for (Map<String,String> _iter183 : _iter182.getValue())
                {
                  {
                    oprot.writeI32(_iter183.size());
                    for (Map.Entry<String, String> _iter184 : _iter183.entrySet())
                    {
                      oprot.writeString(_iter184.getKey());
                      oprot.writeString(_iter184.getValue());
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCategoryKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map185 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<Map<String,String>>>(2*_map185.size);
            for (int _i186 = 0; _i186 < _map185.size; ++_i186)
            {
              String _key187;
              List<Map<String,String>> _val188;
              _key187 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                _val188 = new ArrayList<Map<String,String>>(_list189.size);
                for (int _i190 = 0; _i190 < _list189.size; ++_i190)
                {
                  Map<String,String> _elem191;
                  {
                    org.apache.thrift.protocol.TMap _map192 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    _elem191 = new HashMap<String,String>(2*_map192.size);
                    for (int _i193 = 0; _i193 < _map192.size; ++_i193)
                    {
                      String _key194;
                      String _val195;
                      _key194 = iprot.readString();
                      _val195 = iprot.readString();
                      _elem191.put(_key194, _val195);
                    }
                  }
                  _val188.add(_elem191);
                }
              }
              struct.success.put(_key187, _val188);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllCategoryKeywords_args implements org.apache.thrift.TBase<getAllCategoryKeywords_args, getAllCategoryKeywords_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllCategoryKeywords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllCategoryKeywords_args");

    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllCategoryKeywords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllCategoryKeywords_argsTupleSchemeFactory());
    }

    public Map<String,String> option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPTION((short)1, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllCategoryKeywords_args.class, metaDataMap);
    }

    public getAllCategoryKeywords_args() {
    }

    public getAllCategoryKeywords_args(
      Map<String,String> option)
    {
      this();
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllCategoryKeywords_args(getAllCategoryKeywords_args other) {
      if (other.isSetOption()) {
        Map<String,String> __this__option = new HashMap<String,String>(other.option);
        this.option = __this__option;
      }
    }

    public getAllCategoryKeywords_args deepCopy() {
      return new getAllCategoryKeywords_args(this);
    }

    @Override
    public void clear() {
      this.option = null;
    }

    public int getOptionSize() {
      return (this.option == null) ? 0 : this.option.size();
    }

    public void putToOption(String key, String val) {
      if (this.option == null) {
        this.option = new HashMap<String,String>();
      }
      this.option.put(key, val);
    }

    public Map<String,String> getOption() {
      return this.option;
    }

    public getAllCategoryKeywords_args setOption(Map<String,String> option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllCategoryKeywords_args)
        return this.equals((getAllCategoryKeywords_args)that);
      return false;
    }

    public boolean equals(getAllCategoryKeywords_args that) {
      if (that == null)
        return false;

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllCategoryKeywords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllCategoryKeywords_args(");
      boolean first = true;

      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllCategoryKeywords_argsStandardSchemeFactory implements SchemeFactory {
      public getAllCategoryKeywords_argsStandardScheme getScheme() {
        return new getAllCategoryKeywords_argsStandardScheme();
      }
    }

    private static class getAllCategoryKeywords_argsStandardScheme extends StandardScheme<getAllCategoryKeywords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllCategoryKeywords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map196 = iprot.readMapBegin();
                  struct.option = new HashMap<String,String>(2*_map196.size);
                  for (int _i197 = 0; _i197 < _map196.size; ++_i197)
                  {
                    String _key198;
                    String _val199;
                    _key198 = iprot.readString();
                    _val199 = iprot.readString();
                    struct.option.put(_key198, _val199);
                  }
                  iprot.readMapEnd();
                }
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllCategoryKeywords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.option.size()));
            for (Map.Entry<String, String> _iter200 : struct.option.entrySet())
            {
              oprot.writeString(_iter200.getKey());
              oprot.writeString(_iter200.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllCategoryKeywords_argsTupleSchemeFactory implements SchemeFactory {
      public getAllCategoryKeywords_argsTupleScheme getScheme() {
        return new getAllCategoryKeywords_argsTupleScheme();
      }
    }

    private static class getAllCategoryKeywords_argsTupleScheme extends TupleScheme<getAllCategoryKeywords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllCategoryKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOption()) {
          {
            oprot.writeI32(struct.option.size());
            for (Map.Entry<String, String> _iter201 : struct.option.entrySet())
            {
              oprot.writeString(_iter201.getKey());
              oprot.writeString(_iter201.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllCategoryKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map202 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.option = new HashMap<String,String>(2*_map202.size);
            for (int _i203 = 0; _i203 < _map202.size; ++_i203)
            {
              String _key204;
              String _val205;
              _key204 = iprot.readString();
              _val205 = iprot.readString();
              struct.option.put(_key204, _val205);
            }
          }
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class getAllCategoryKeywords_result implements org.apache.thrift.TBase<getAllCategoryKeywords_result, getAllCategoryKeywords_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllCategoryKeywords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllCategoryKeywords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllCategoryKeywords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllCategoryKeywords_resultTupleSchemeFactory());
    }

    public Map<String,List<Map<String,String>>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllCategoryKeywords_result.class, metaDataMap);
    }

    public getAllCategoryKeywords_result() {
    }

    public getAllCategoryKeywords_result(
      Map<String,List<Map<String,String>>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllCategoryKeywords_result(getAllCategoryKeywords_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<Map<String,String>>> __this__success = new HashMap<String,List<Map<String,String>>>(other.success.size());
        for (Map.Entry<String, List<Map<String,String>>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<Map<String,String>> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<Map<String,String>> __this__success_copy_value = new ArrayList<Map<String,String>>(other_element_value.size());
          for (Map<String,String> other_element_value_element : other_element_value) {
            Map<String,String> __this__success_copy_value_copy = new HashMap<String,String>(other_element_value_element);
            __this__success_copy_value.add(__this__success_copy_value_copy);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getAllCategoryKeywords_result deepCopy() {
      return new getAllCategoryKeywords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<Map<String,String>> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<Map<String,String>>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<Map<String,String>>> getSuccess() {
      return this.success;
    }

    public getAllCategoryKeywords_result setSuccess(Map<String,List<Map<String,String>>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<Map<String,String>>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllCategoryKeywords_result)
        return this.equals((getAllCategoryKeywords_result)that);
      return false;
    }

    public boolean equals(getAllCategoryKeywords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllCategoryKeywords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllCategoryKeywords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllCategoryKeywords_resultStandardSchemeFactory implements SchemeFactory {
      public getAllCategoryKeywords_resultStandardScheme getScheme() {
        return new getAllCategoryKeywords_resultStandardScheme();
      }
    }

    private static class getAllCategoryKeywords_resultStandardScheme extends StandardScheme<getAllCategoryKeywords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllCategoryKeywords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map206 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<Map<String,String>>>(2*_map206.size);
                  for (int _i207 = 0; _i207 < _map206.size; ++_i207)
                  {
                    String _key208;
                    List<Map<String,String>> _val209;
                    _key208 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list210 = iprot.readListBegin();
                      _val209 = new ArrayList<Map<String,String>>(_list210.size);
                      for (int _i211 = 0; _i211 < _list210.size; ++_i211)
                      {
                        Map<String,String> _elem212;
                        {
                          org.apache.thrift.protocol.TMap _map213 = iprot.readMapBegin();
                          _elem212 = new HashMap<String,String>(2*_map213.size);
                          for (int _i214 = 0; _i214 < _map213.size; ++_i214)
                          {
                            String _key215;
                            String _val216;
                            _key215 = iprot.readString();
                            _val216 = iprot.readString();
                            _elem212.put(_key215, _val216);
                          }
                          iprot.readMapEnd();
                        }
                        _val209.add(_elem212);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key208, _val209);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllCategoryKeywords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<Map<String,String>>> _iter217 : struct.success.entrySet())
            {
              oprot.writeString(_iter217.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter217.getValue().size()));
                for (Map<String,String> _iter218 : _iter217.getValue())
                {
                  {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter218.size()));
                    for (Map.Entry<String, String> _iter219 : _iter218.entrySet())
                    {
                      oprot.writeString(_iter219.getKey());
                      oprot.writeString(_iter219.getValue());
                    }
                    oprot.writeMapEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllCategoryKeywords_resultTupleSchemeFactory implements SchemeFactory {
      public getAllCategoryKeywords_resultTupleScheme getScheme() {
        return new getAllCategoryKeywords_resultTupleScheme();
      }
    }

    private static class getAllCategoryKeywords_resultTupleScheme extends TupleScheme<getAllCategoryKeywords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllCategoryKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<Map<String,String>>> _iter220 : struct.success.entrySet())
            {
              oprot.writeString(_iter220.getKey());
              {
                oprot.writeI32(_iter220.getValue().size());
                for (Map<String,String> _iter221 : _iter220.getValue())
                {
                  {
                    oprot.writeI32(_iter221.size());
                    for (Map.Entry<String, String> _iter222 : _iter221.entrySet())
                    {
                      oprot.writeString(_iter222.getKey());
                      oprot.writeString(_iter222.getValue());
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllCategoryKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map223 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<Map<String,String>>>(2*_map223.size);
            for (int _i224 = 0; _i224 < _map223.size; ++_i224)
            {
              String _key225;
              List<Map<String,String>> _val226;
              _key225 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list227 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                _val226 = new ArrayList<Map<String,String>>(_list227.size);
                for (int _i228 = 0; _i228 < _list227.size; ++_i228)
                {
                  Map<String,String> _elem229;
                  {
                    org.apache.thrift.protocol.TMap _map230 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    _elem229 = new HashMap<String,String>(2*_map230.size);
                    for (int _i231 = 0; _i231 < _map230.size; ++_i231)
                    {
                      String _key232;
                      String _val233;
                      _key232 = iprot.readString();
                      _val233 = iprot.readString();
                      _elem229.put(_key232, _val233);
                    }
                  }
                  _val226.add(_elem229);
                }
              }
              struct.success.put(_key225, _val226);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllSeoCategoryUrls_args implements org.apache.thrift.TBase<getAllSeoCategoryUrls_args, getAllSeoCategoryUrls_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSeoCategoryUrls_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSeoCategoryUrls_args");

    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSeoCategoryUrls_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSeoCategoryUrls_argsTupleSchemeFactory());
    }

    public Map<String,String> option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPTION((short)1, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSeoCategoryUrls_args.class, metaDataMap);
    }

    public getAllSeoCategoryUrls_args() {
    }

    public getAllSeoCategoryUrls_args(
      Map<String,String> option)
    {
      this();
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSeoCategoryUrls_args(getAllSeoCategoryUrls_args other) {
      if (other.isSetOption()) {
        Map<String,String> __this__option = new HashMap<String,String>(other.option);
        this.option = __this__option;
      }
    }

    public getAllSeoCategoryUrls_args deepCopy() {
      return new getAllSeoCategoryUrls_args(this);
    }

    @Override
    public void clear() {
      this.option = null;
    }

    public int getOptionSize() {
      return (this.option == null) ? 0 : this.option.size();
    }

    public void putToOption(String key, String val) {
      if (this.option == null) {
        this.option = new HashMap<String,String>();
      }
      this.option.put(key, val);
    }

    public Map<String,String> getOption() {
      return this.option;
    }

    public getAllSeoCategoryUrls_args setOption(Map<String,String> option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSeoCategoryUrls_args)
        return this.equals((getAllSeoCategoryUrls_args)that);
      return false;
    }

    public boolean equals(getAllSeoCategoryUrls_args that) {
      if (that == null)
        return false;

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllSeoCategoryUrls_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSeoCategoryUrls_args(");
      boolean first = true;

      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSeoCategoryUrls_argsStandardSchemeFactory implements SchemeFactory {
      public getAllSeoCategoryUrls_argsStandardScheme getScheme() {
        return new getAllSeoCategoryUrls_argsStandardScheme();
      }
    }

    private static class getAllSeoCategoryUrls_argsStandardScheme extends StandardScheme<getAllSeoCategoryUrls_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSeoCategoryUrls_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map234 = iprot.readMapBegin();
                  struct.option = new HashMap<String,String>(2*_map234.size);
                  for (int _i235 = 0; _i235 < _map234.size; ++_i235)
                  {
                    String _key236;
                    String _val237;
                    _key236 = iprot.readString();
                    _val237 = iprot.readString();
                    struct.option.put(_key236, _val237);
                  }
                  iprot.readMapEnd();
                }
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSeoCategoryUrls_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.option.size()));
            for (Map.Entry<String, String> _iter238 : struct.option.entrySet())
            {
              oprot.writeString(_iter238.getKey());
              oprot.writeString(_iter238.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSeoCategoryUrls_argsTupleSchemeFactory implements SchemeFactory {
      public getAllSeoCategoryUrls_argsTupleScheme getScheme() {
        return new getAllSeoCategoryUrls_argsTupleScheme();
      }
    }

    private static class getAllSeoCategoryUrls_argsTupleScheme extends TupleScheme<getAllSeoCategoryUrls_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSeoCategoryUrls_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOption()) {
          {
            oprot.writeI32(struct.option.size());
            for (Map.Entry<String, String> _iter239 : struct.option.entrySet())
            {
              oprot.writeString(_iter239.getKey());
              oprot.writeString(_iter239.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSeoCategoryUrls_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map240 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.option = new HashMap<String,String>(2*_map240.size);
            for (int _i241 = 0; _i241 < _map240.size; ++_i241)
            {
              String _key242;
              String _val243;
              _key242 = iprot.readString();
              _val243 = iprot.readString();
              struct.option.put(_key242, _val243);
            }
          }
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class getAllSeoCategoryUrls_result implements org.apache.thrift.TBase<getAllSeoCategoryUrls_result, getAllSeoCategoryUrls_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSeoCategoryUrls_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSeoCategoryUrls_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSeoCategoryUrls_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSeoCategoryUrls_resultTupleSchemeFactory());
    }

    public CmsPageResultsInfos success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CmsPageResultsInfos.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSeoCategoryUrls_result.class, metaDataMap);
    }

    public getAllSeoCategoryUrls_result() {
    }

    public getAllSeoCategoryUrls_result(
      CmsPageResultsInfos success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSeoCategoryUrls_result(getAllSeoCategoryUrls_result other) {
      if (other.isSetSuccess()) {
        this.success = new CmsPageResultsInfos(other.success);
      }
    }

    public getAllSeoCategoryUrls_result deepCopy() {
      return new getAllSeoCategoryUrls_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CmsPageResultsInfos getSuccess() {
      return this.success;
    }

    public getAllSeoCategoryUrls_result setSuccess(CmsPageResultsInfos success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CmsPageResultsInfos)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSeoCategoryUrls_result)
        return this.equals((getAllSeoCategoryUrls_result)that);
      return false;
    }

    public boolean equals(getAllSeoCategoryUrls_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllSeoCategoryUrls_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSeoCategoryUrls_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSeoCategoryUrls_resultStandardSchemeFactory implements SchemeFactory {
      public getAllSeoCategoryUrls_resultStandardScheme getScheme() {
        return new getAllSeoCategoryUrls_resultStandardScheme();
      }
    }

    private static class getAllSeoCategoryUrls_resultStandardScheme extends StandardScheme<getAllSeoCategoryUrls_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSeoCategoryUrls_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CmsPageResultsInfos();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSeoCategoryUrls_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSeoCategoryUrls_resultTupleSchemeFactory implements SchemeFactory {
      public getAllSeoCategoryUrls_resultTupleScheme getScheme() {
        return new getAllSeoCategoryUrls_resultTupleScheme();
      }
    }

    private static class getAllSeoCategoryUrls_resultTupleScheme extends TupleScheme<getAllSeoCategoryUrls_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSeoCategoryUrls_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSeoCategoryUrls_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CmsPageResultsInfos();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllSeoCategoryInfos_args implements org.apache.thrift.TBase<getAllSeoCategoryInfos_args, getAllSeoCategoryInfos_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSeoCategoryInfos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSeoCategoryInfos_args");

    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSeoCategoryInfos_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSeoCategoryInfos_argsTupleSchemeFactory());
    }

    public Map<String,String> option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPTION((short)1, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSeoCategoryInfos_args.class, metaDataMap);
    }

    public getAllSeoCategoryInfos_args() {
    }

    public getAllSeoCategoryInfos_args(
      Map<String,String> option)
    {
      this();
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSeoCategoryInfos_args(getAllSeoCategoryInfos_args other) {
      if (other.isSetOption()) {
        Map<String,String> __this__option = new HashMap<String,String>(other.option);
        this.option = __this__option;
      }
    }

    public getAllSeoCategoryInfos_args deepCopy() {
      return new getAllSeoCategoryInfos_args(this);
    }

    @Override
    public void clear() {
      this.option = null;
    }

    public int getOptionSize() {
      return (this.option == null) ? 0 : this.option.size();
    }

    public void putToOption(String key, String val) {
      if (this.option == null) {
        this.option = new HashMap<String,String>();
      }
      this.option.put(key, val);
    }

    public Map<String,String> getOption() {
      return this.option;
    }

    public getAllSeoCategoryInfos_args setOption(Map<String,String> option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSeoCategoryInfos_args)
        return this.equals((getAllSeoCategoryInfos_args)that);
      return false;
    }

    public boolean equals(getAllSeoCategoryInfos_args that) {
      if (that == null)
        return false;

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllSeoCategoryInfos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSeoCategoryInfos_args(");
      boolean first = true;

      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSeoCategoryInfos_argsStandardSchemeFactory implements SchemeFactory {
      public getAllSeoCategoryInfos_argsStandardScheme getScheme() {
        return new getAllSeoCategoryInfos_argsStandardScheme();
      }
    }

    private static class getAllSeoCategoryInfos_argsStandardScheme extends StandardScheme<getAllSeoCategoryInfos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSeoCategoryInfos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map244 = iprot.readMapBegin();
                  struct.option = new HashMap<String,String>(2*_map244.size);
                  for (int _i245 = 0; _i245 < _map244.size; ++_i245)
                  {
                    String _key246;
                    String _val247;
                    _key246 = iprot.readString();
                    _val247 = iprot.readString();
                    struct.option.put(_key246, _val247);
                  }
                  iprot.readMapEnd();
                }
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSeoCategoryInfos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.option.size()));
            for (Map.Entry<String, String> _iter248 : struct.option.entrySet())
            {
              oprot.writeString(_iter248.getKey());
              oprot.writeString(_iter248.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSeoCategoryInfos_argsTupleSchemeFactory implements SchemeFactory {
      public getAllSeoCategoryInfos_argsTupleScheme getScheme() {
        return new getAllSeoCategoryInfos_argsTupleScheme();
      }
    }

    private static class getAllSeoCategoryInfos_argsTupleScheme extends TupleScheme<getAllSeoCategoryInfos_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSeoCategoryInfos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOption()) {
          {
            oprot.writeI32(struct.option.size());
            for (Map.Entry<String, String> _iter249 : struct.option.entrySet())
            {
              oprot.writeString(_iter249.getKey());
              oprot.writeString(_iter249.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSeoCategoryInfos_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map250 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.option = new HashMap<String,String>(2*_map250.size);
            for (int _i251 = 0; _i251 < _map250.size; ++_i251)
            {
              String _key252;
              String _val253;
              _key252 = iprot.readString();
              _val253 = iprot.readString();
              struct.option.put(_key252, _val253);
            }
          }
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class getAllSeoCategoryInfos_result implements org.apache.thrift.TBase<getAllSeoCategoryInfos_result, getAllSeoCategoryInfos_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSeoCategoryInfos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSeoCategoryInfos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSeoCategoryInfos_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSeoCategoryInfos_resultTupleSchemeFactory());
    }

    public CmsPageResultsInfos success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CmsPageResultsInfos.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSeoCategoryInfos_result.class, metaDataMap);
    }

    public getAllSeoCategoryInfos_result() {
    }

    public getAllSeoCategoryInfos_result(
      CmsPageResultsInfos success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSeoCategoryInfos_result(getAllSeoCategoryInfos_result other) {
      if (other.isSetSuccess()) {
        this.success = new CmsPageResultsInfos(other.success);
      }
    }

    public getAllSeoCategoryInfos_result deepCopy() {
      return new getAllSeoCategoryInfos_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CmsPageResultsInfos getSuccess() {
      return this.success;
    }

    public getAllSeoCategoryInfos_result setSuccess(CmsPageResultsInfos success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CmsPageResultsInfos)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSeoCategoryInfos_result)
        return this.equals((getAllSeoCategoryInfos_result)that);
      return false;
    }

    public boolean equals(getAllSeoCategoryInfos_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllSeoCategoryInfos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSeoCategoryInfos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSeoCategoryInfos_resultStandardSchemeFactory implements SchemeFactory {
      public getAllSeoCategoryInfos_resultStandardScheme getScheme() {
        return new getAllSeoCategoryInfos_resultStandardScheme();
      }
    }

    private static class getAllSeoCategoryInfos_resultStandardScheme extends StandardScheme<getAllSeoCategoryInfos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSeoCategoryInfos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CmsPageResultsInfos();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSeoCategoryInfos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSeoCategoryInfos_resultTupleSchemeFactory implements SchemeFactory {
      public getAllSeoCategoryInfos_resultTupleScheme getScheme() {
        return new getAllSeoCategoryInfos_resultTupleScheme();
      }
    }

    private static class getAllSeoCategoryInfos_resultTupleScheme extends TupleScheme<getAllSeoCategoryInfos_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSeoCategoryInfos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSeoCategoryInfos_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CmsPageResultsInfos();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class buildCommodityPageByNo_args implements org.apache.thrift.TBase<buildCommodityPageByNo_args, buildCommodityPageByNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<buildCommodityPageByNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buildCommodityPageByNo_args");

    private static final org.apache.thrift.protocol.TField COMMODITY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityNo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buildCommodityPageByNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buildCommodityPageByNo_argsTupleSchemeFactory());
    }

    public String commodityNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMODITY_NO((short)1, "commodityNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMODITY_NO
            return COMMODITY_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMODITY_NO, new org.apache.thrift.meta_data.FieldMetaData("commodityNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buildCommodityPageByNo_args.class, metaDataMap);
    }

    public buildCommodityPageByNo_args() {
    }

    public buildCommodityPageByNo_args(
      String commodityNo)
    {
      this();
      this.commodityNo = commodityNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buildCommodityPageByNo_args(buildCommodityPageByNo_args other) {
      if (other.isSetCommodityNo()) {
        this.commodityNo = other.commodityNo;
      }
    }

    public buildCommodityPageByNo_args deepCopy() {
      return new buildCommodityPageByNo_args(this);
    }

    @Override
    public void clear() {
      this.commodityNo = null;
    }

    public String getCommodityNo() {
      return this.commodityNo;
    }

    public buildCommodityPageByNo_args setCommodityNo(String commodityNo) {
      this.commodityNo = commodityNo;
      return this;
    }

    public void unsetCommodityNo() {
      this.commodityNo = null;
    }

    /** Returns true if field commodityNo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommodityNo() {
      return this.commodityNo != null;
    }

    public void setCommodityNoIsSet(boolean value) {
      if (!value) {
        this.commodityNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMODITY_NO:
        if (value == null) {
          unsetCommodityNo();
        } else {
          setCommodityNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMODITY_NO:
        return getCommodityNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMODITY_NO:
        return isSetCommodityNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buildCommodityPageByNo_args)
        return this.equals((buildCommodityPageByNo_args)that);
      return false;
    }

    public boolean equals(buildCommodityPageByNo_args that) {
      if (that == null)
        return false;

      boolean this_present_commodityNo = true && this.isSetCommodityNo();
      boolean that_present_commodityNo = true && that.isSetCommodityNo();
      if (this_present_commodityNo || that_present_commodityNo) {
        if (!(this_present_commodityNo && that_present_commodityNo))
          return false;
        if (!this.commodityNo.equals(that.commodityNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(buildCommodityPageByNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommodityNo()).compareTo(other.isSetCommodityNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommodityNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityNo, other.commodityNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buildCommodityPageByNo_args(");
      boolean first = true;

      sb.append("commodityNo:");
      if (this.commodityNo == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buildCommodityPageByNo_argsStandardSchemeFactory implements SchemeFactory {
      public buildCommodityPageByNo_argsStandardScheme getScheme() {
        return new buildCommodityPageByNo_argsStandardScheme();
      }
    }

    private static class buildCommodityPageByNo_argsStandardScheme extends StandardScheme<buildCommodityPageByNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buildCommodityPageByNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMODITY_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.commodityNo = iprot.readString();
                struct.setCommodityNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buildCommodityPageByNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commodityNo != null) {
          oprot.writeFieldBegin(COMMODITY_NO_FIELD_DESC);
          oprot.writeString(struct.commodityNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buildCommodityPageByNo_argsTupleSchemeFactory implements SchemeFactory {
      public buildCommodityPageByNo_argsTupleScheme getScheme() {
        return new buildCommodityPageByNo_argsTupleScheme();
      }
    }

    private static class buildCommodityPageByNo_argsTupleScheme extends TupleScheme<buildCommodityPageByNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buildCommodityPageByNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommodityNo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommodityNo()) {
          oprot.writeString(struct.commodityNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buildCommodityPageByNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commodityNo = iprot.readString();
          struct.setCommodityNoIsSet(true);
        }
      }
    }

  }

  public static class buildCommodityPageByNo_result implements org.apache.thrift.TBase<buildCommodityPageByNo_result, buildCommodityPageByNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<buildCommodityPageByNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("buildCommodityPageByNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new buildCommodityPageByNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new buildCommodityPageByNo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(buildCommodityPageByNo_result.class, metaDataMap);
    }

    public buildCommodityPageByNo_result() {
    }

    public buildCommodityPageByNo_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buildCommodityPageByNo_result(buildCommodityPageByNo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public buildCommodityPageByNo_result deepCopy() {
      return new buildCommodityPageByNo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public buildCommodityPageByNo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buildCommodityPageByNo_result)
        return this.equals((buildCommodityPageByNo_result)that);
      return false;
    }

    public boolean equals(buildCommodityPageByNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(buildCommodityPageByNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("buildCommodityPageByNo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class buildCommodityPageByNo_resultStandardSchemeFactory implements SchemeFactory {
      public buildCommodityPageByNo_resultStandardScheme getScheme() {
        return new buildCommodityPageByNo_resultStandardScheme();
      }
    }

    private static class buildCommodityPageByNo_resultStandardScheme extends StandardScheme<buildCommodityPageByNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, buildCommodityPageByNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, buildCommodityPageByNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class buildCommodityPageByNo_resultTupleSchemeFactory implements SchemeFactory {
      public buildCommodityPageByNo_resultTupleScheme getScheme() {
        return new buildCommodityPageByNo_resultTupleScheme();
      }
    }

    private static class buildCommodityPageByNo_resultTupleScheme extends TupleScheme<buildCommodityPageByNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, buildCommodityPageByNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, buildCommodityPageByNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRandomSeoKeywords_args implements org.apache.thrift.TBase<getRandomSeoKeywords_args, getRandomSeoKeywords_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRandomSeoKeywords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRandomSeoKeywords_args");

    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRandomSeoKeywords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRandomSeoKeywords_argsTupleSchemeFactory());
    }

    public int num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUM((short)1, "num");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUM
            return NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRandomSeoKeywords_args.class, metaDataMap);
    }

    public getRandomSeoKeywords_args() {
    }

    public getRandomSeoKeywords_args(
      int num)
    {
      this();
      this.num = num;
      setNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRandomSeoKeywords_args(getRandomSeoKeywords_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.num = other.num;
    }

    public getRandomSeoKeywords_args deepCopy() {
      return new getRandomSeoKeywords_args(this);
    }

    @Override
    public void clear() {
      setNumIsSet(false);
      this.num = 0;
    }

    public int getNum() {
      return this.num;
    }

    public getRandomSeoKeywords_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NUM:
        return Integer.valueOf(getNum());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NUM:
        return isSetNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRandomSeoKeywords_args)
        return this.equals((getRandomSeoKeywords_args)that);
      return false;
    }

    public boolean equals(getRandomSeoKeywords_args that) {
      if (that == null)
        return false;

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRandomSeoKeywords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRandomSeoKeywords_args(");
      boolean first = true;

      sb.append("num:");
      sb.append(this.num);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRandomSeoKeywords_argsStandardSchemeFactory implements SchemeFactory {
      public getRandomSeoKeywords_argsStandardScheme getScheme() {
        return new getRandomSeoKeywords_argsStandardScheme();
      }
    }

    private static class getRandomSeoKeywords_argsStandardScheme extends StandardScheme<getRandomSeoKeywords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRandomSeoKeywords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRandomSeoKeywords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRandomSeoKeywords_argsTupleSchemeFactory implements SchemeFactory {
      public getRandomSeoKeywords_argsTupleScheme getScheme() {
        return new getRandomSeoKeywords_argsTupleScheme();
      }
    }

    private static class getRandomSeoKeywords_argsTupleScheme extends TupleScheme<getRandomSeoKeywords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRandomSeoKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRandomSeoKeywords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
      }
    }

  }

  public static class getRandomSeoKeywords_result implements org.apache.thrift.TBase<getRandomSeoKeywords_result, getRandomSeoKeywords_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRandomSeoKeywords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRandomSeoKeywords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRandomSeoKeywords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRandomSeoKeywords_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRandomSeoKeywords_result.class, metaDataMap);
    }

    public getRandomSeoKeywords_result() {
    }

    public getRandomSeoKeywords_result(
      List<Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRandomSeoKeywords_result(getRandomSeoKeywords_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public getRandomSeoKeywords_result deepCopy() {
      return new getRandomSeoKeywords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public getRandomSeoKeywords_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRandomSeoKeywords_result)
        return this.equals((getRandomSeoKeywords_result)that);
      return false;
    }

    public boolean equals(getRandomSeoKeywords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRandomSeoKeywords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRandomSeoKeywords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRandomSeoKeywords_resultStandardSchemeFactory implements SchemeFactory {
      public getRandomSeoKeywords_resultStandardScheme getScheme() {
        return new getRandomSeoKeywords_resultStandardScheme();
      }
    }

    private static class getRandomSeoKeywords_resultStandardScheme extends StandardScheme<getRandomSeoKeywords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRandomSeoKeywords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list254 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list254.size);
                  for (int _i255 = 0; _i255 < _list254.size; ++_i255)
                  {
                    Map<String,String> _elem256;
                    {
                      org.apache.thrift.protocol.TMap _map257 = iprot.readMapBegin();
                      _elem256 = new HashMap<String,String>(2*_map257.size);
                      for (int _i258 = 0; _i258 < _map257.size; ++_i258)
                      {
                        String _key259;
                        String _val260;
                        _key259 = iprot.readString();
                        _val260 = iprot.readString();
                        _elem256.put(_key259, _val260);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem256);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRandomSeoKeywords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter261 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter261.size()));
                for (Map.Entry<String, String> _iter262 : _iter261.entrySet())
                {
                  oprot.writeString(_iter262.getKey());
                  oprot.writeString(_iter262.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRandomSeoKeywords_resultTupleSchemeFactory implements SchemeFactory {
      public getRandomSeoKeywords_resultTupleScheme getScheme() {
        return new getRandomSeoKeywords_resultTupleScheme();
      }
    }

    private static class getRandomSeoKeywords_resultTupleScheme extends TupleScheme<getRandomSeoKeywords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRandomSeoKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter263 : struct.success)
            {
              {
                oprot.writeI32(_iter263.size());
                for (Map.Entry<String, String> _iter264 : _iter263.entrySet())
                {
                  oprot.writeString(_iter264.getKey());
                  oprot.writeString(_iter264.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRandomSeoKeywords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list265 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list265.size);
            for (int _i266 = 0; _i266 < _list265.size; ++_i266)
            {
              Map<String,String> _elem267;
              {
                org.apache.thrift.protocol.TMap _map268 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem267 = new HashMap<String,String>(2*_map268.size);
                for (int _i269 = 0; _i269 < _map268.size; ++_i269)
                {
                  String _key270;
                  String _val271;
                  _key270 = iprot.readString();
                  _val271 = iprot.readString();
                  _elem267.put(_key270, _val271);
                }
              }
              struct.success.add(_elem267);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class CmsBatchBuildPage_args implements org.apache.thrift.TBase<CmsBatchBuildPage_args, CmsBatchBuildPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<CmsBatchBuildPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CmsBatchBuildPage_args");

    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CmsBatchBuildPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CmsBatchBuildPage_argsTupleSchemeFactory());
    }

    public Map<String,String> option; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPTION((short)1, "option");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPTION
            return OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CmsBatchBuildPage_args.class, metaDataMap);
    }

    public CmsBatchBuildPage_args() {
    }

    public CmsBatchBuildPage_args(
      Map<String,String> option)
    {
      this();
      this.option = option;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CmsBatchBuildPage_args(CmsBatchBuildPage_args other) {
      if (other.isSetOption()) {
        Map<String,String> __this__option = new HashMap<String,String>(other.option);
        this.option = __this__option;
      }
    }

    public CmsBatchBuildPage_args deepCopy() {
      return new CmsBatchBuildPage_args(this);
    }

    @Override
    public void clear() {
      this.option = null;
    }

    public int getOptionSize() {
      return (this.option == null) ? 0 : this.option.size();
    }

    public void putToOption(String key, String val) {
      if (this.option == null) {
        this.option = new HashMap<String,String>();
      }
      this.option.put(key, val);
    }

    public Map<String,String> getOption() {
      return this.option;
    }

    public CmsBatchBuildPage_args setOption(Map<String,String> option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPTION:
        return getOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPTION:
        return isSetOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CmsBatchBuildPage_args)
        return this.equals((CmsBatchBuildPage_args)that);
      return false;
    }

    public boolean equals(CmsBatchBuildPage_args that) {
      if (that == null)
        return false;

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(CmsBatchBuildPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CmsBatchBuildPage_args(");
      boolean first = true;

      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CmsBatchBuildPage_argsStandardSchemeFactory implements SchemeFactory {
      public CmsBatchBuildPage_argsStandardScheme getScheme() {
        return new CmsBatchBuildPage_argsStandardScheme();
      }
    }

    private static class CmsBatchBuildPage_argsStandardScheme extends StandardScheme<CmsBatchBuildPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CmsBatchBuildPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map272 = iprot.readMapBegin();
                  struct.option = new HashMap<String,String>(2*_map272.size);
                  for (int _i273 = 0; _i273 < _map272.size; ++_i273)
                  {
                    String _key274;
                    String _val275;
                    _key274 = iprot.readString();
                    _val275 = iprot.readString();
                    struct.option.put(_key274, _val275);
                  }
                  iprot.readMapEnd();
                }
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CmsBatchBuildPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.option.size()));
            for (Map.Entry<String, String> _iter276 : struct.option.entrySet())
            {
              oprot.writeString(_iter276.getKey());
              oprot.writeString(_iter276.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CmsBatchBuildPage_argsTupleSchemeFactory implements SchemeFactory {
      public CmsBatchBuildPage_argsTupleScheme getScheme() {
        return new CmsBatchBuildPage_argsTupleScheme();
      }
    }

    private static class CmsBatchBuildPage_argsTupleScheme extends TupleScheme<CmsBatchBuildPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CmsBatchBuildPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOption()) {
          {
            oprot.writeI32(struct.option.size());
            for (Map.Entry<String, String> _iter277 : struct.option.entrySet())
            {
              oprot.writeString(_iter277.getKey());
              oprot.writeString(_iter277.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CmsBatchBuildPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map278 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.option = new HashMap<String,String>(2*_map278.size);
            for (int _i279 = 0; _i279 < _map278.size; ++_i279)
            {
              String _key280;
              String _val281;
              _key280 = iprot.readString();
              _val281 = iprot.readString();
              struct.option.put(_key280, _val281);
            }
          }
          struct.setOptionIsSet(true);
        }
      }
    }

  }

  public static class CmsBatchBuildPage_result implements org.apache.thrift.TBase<CmsBatchBuildPage_result, CmsBatchBuildPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<CmsBatchBuildPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CmsBatchBuildPage_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CmsBatchBuildPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CmsBatchBuildPage_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CmsBatchBuildPage_result.class, metaDataMap);
    }

    public CmsBatchBuildPage_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CmsBatchBuildPage_result(CmsBatchBuildPage_result other) {
    }

    public CmsBatchBuildPage_result deepCopy() {
      return new CmsBatchBuildPage_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CmsBatchBuildPage_result)
        return this.equals((CmsBatchBuildPage_result)that);
      return false;
    }

    public boolean equals(CmsBatchBuildPage_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(CmsBatchBuildPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CmsBatchBuildPage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CmsBatchBuildPage_resultStandardSchemeFactory implements SchemeFactory {
      public CmsBatchBuildPage_resultStandardScheme getScheme() {
        return new CmsBatchBuildPage_resultStandardScheme();
      }
    }

    private static class CmsBatchBuildPage_resultStandardScheme extends StandardScheme<CmsBatchBuildPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CmsBatchBuildPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CmsBatchBuildPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CmsBatchBuildPage_resultTupleSchemeFactory implements SchemeFactory {
      public CmsBatchBuildPage_resultTupleScheme getScheme() {
        return new CmsBatchBuildPage_resultTupleScheme();
      }
    }

    private static class CmsBatchBuildPage_resultTupleScheme extends TupleScheme<CmsBatchBuildPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CmsBatchBuildPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CmsBatchBuildPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
