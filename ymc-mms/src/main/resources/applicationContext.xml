<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/jee  http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
	http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-lazy-init="true">

	<description>Spring公共配置</description>
	
	<!--开启注解-->
	<context:annotation-config />

	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com.belle, com.yougou">
	    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<context:property-placeholder location="classpath:/config/*.properties,file:/etc/yougouhtconf/*.properties" ignore-unresolvable="true" ignore-resource-not-found="true" 
		local-override="true" />
	
	<!-- c3p0 -->
	<!-- 连接cobar库，如果不做读写分离，则跟主库配置一样  -->
	<bean id="parentDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" abstract="true" destroy-method="close">
		<property name="minPoolSize"><value>5</value></property>
		<property name="maxPoolSize"><value>100</value></property>
		<property name="initialPoolSize"><value>5</value></property>
		<property name="maxIdleTime"><value>60</value></property>
		<property name="acquireIncrement"><value>5</value></property>
		<property name="idleConnectionTestPeriod"><value>60</value></property>
		<property name="acquireRetryAttempts"><value>30</value></property>
		<property name="numHelperThreads"><value>3</value></property>
		<property name="acquireRetryDelay"><value>1000</value></property>
		<property name="propertyCycle"><value>300</value></property>
		<property name="checkoutTimeout"><value>20000</value></property>
	</bean>
	
	<bean id="dataSource" parent="parentDataSource">
		<property name="driverClass"><value>${jdbc.driver}</value></property>
		<property name="jdbcUrl"><value>${jdbc.url}</value></property>
		<property name="user" ><value>${jdbc.username}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
	</bean>
	
	<!-- 主库 -->
    <bean id="dataSource1" parent="parentDataSource">
		<property name="driverClass"><value>${jdbc.driver}</value></property>
		<property name="jdbcUrl"><value>${jdbc1.url}</value></property>
		<property name="user" ><value>${jdbc1.username}</value></property>
		<property name="password"><value>${jdbc1.password}</value></property>
	</bean>
	
	 <!-- 后台权限系统库  -->
    <bean id="dataSourceSys" parent="parentDataSource">
		<property name="driverClass"><value>${jdbc.driver}</value></property>
		<property name="jdbcUrl"><value>${jdbcSys.url}</value></property>
		<property name="user" ><value>${jdbcSys.username}</value></property>
		<property name="password"><value>${jdbcSys.password}</value></property>
	</bean>
	
	<!-- Hibernate配置 -->
	<bean id="sessionFactory"  name="sessionFactory"  class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" >
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.batch_size}</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.connection.release_mode">after_statement</prop>
				<!-- 配置 hibernate boolean型与 数据库 char(1) 的映射 after_statement  -->
				<prop key="query.substitutions">true 1,false 0</prop>
<!-- 					<prop key="hibernate.query.factory_class">org.hibernate.hql.classic.ClassicQueryTranslatorFactory -->
<!-- 					</prop> -->
<!-- 				  <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<!-- 最优化二级缓存 -->
				<prop key="hibernate.cache.use_structured_entries">true</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">/ehcache.xml</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<!-- belle -->
				<!--value>com.belle.yitiansystem.*.model.pojo</value-->
				<value>com.belle.yitiansystem.merchant.model.pojo</value>
				<value>com.belle.yitiansystem.mctnotice.model.pojo</value>
				<value>com.belle.yitiansystem.asm.model.pojo</value>
				<value>com.belle.yitiansystem.systemmgmt.model.pojo</value>
				<value>com.belle.infrastructure.log.model.pojo</value>
				<!-- other -->
				<value>com.belle.other.model.pojo</value>
				<!-- yougou -->
				<value>com.yougou.api.model.pojo</value>
				<value>com.yougou.iodf.model.pojo</value>
			</list>
		</property>
	</bean>
	
	
	<!-- JDBC 据源事务管理 -->
<!-- 	<bean id="transactionManager4Batis" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager4Batis" /> -->
	
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
    
     
     
	<!-- 动态数据源切换 
	<bean id="dataSourceAdvice" class="com.belle.infrastructure.spring.DataSourceAdvice" />
	-->
	
	<!-- 动态数据源切换 -->
	<bean id="dynamicDataSource" class="com.belle.infrastructure.spring.DynamicDataSource">
         <property name="targetDataSources">
             <map key-type="java.lang.String">
                 <entry key="slave1" value-ref="dataSource" />
                 <entry key="master" value-ref="dataSource1" />
                 <entry key="dataSys" value-ref="dataSourceSys" />
             </map>
         </property>
         <property name="defaultTargetDataSource" ref="dataSource" />
     </bean>

    <!-- 事务切面  -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="createOrder" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="*"  propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>

	<!-- 事务AOP -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.yougou.order.adapter.*.*(..))" advice-ref="txAdvice" /> 
	</aop:config>
	
	<!--end  第一数据源   -->
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<!--视图资源位置-->
		<property name="templateLoaderPaths">
			<list>
				<value>/WEB-INF/ftl/</value>
				<value>/WEB-INF/templates/</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop><!-- 模板更新延时 -->
				<prop key="locale">zh_CN</prop>
				<prop key="default_encoding">UTF-8</prop>
			</props>
		</property>
		<!-- 全局变量部分 -->
		<property name="freemarkerVariables">
			<map>
				<entry key="BasePath" value="${yougou.BasePath}" />
				<!-- 应用于b2c前台url在静态环境和开发环境中切换 200生产环境  500开发环境-->
				<entry key="model" value="200" />
				<entry key="xml_escape" value-ref="fmXmlEscape" />
			</map>
		</property>
	</bean>
	
	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>
	
	<!-- 定义 FreeMaker Bean 包装器 -->
	<bean id="freemarkerBeansWrapper" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod">
			<value>freemarker.ext.beans.BeansWrapper.getDefaultInstance</value>
		</property>
	</bean>
	
	<!-- Freemarker配置 -->
	<bean id="ftlviewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="cache" value="true"/>
		<property name="prefix" value=""/>
		<property name="suffix" value=".ftl"/>
		<property name="attributesMap">
			<map key-type="java.lang.String" value-type="freemarker.template.TemplateMethodModel">
				<entry key="bitwise_and">
					<bean class="com.belle.infrastructure.freemarker.functions.BitwiseAndFuncation"/>
				</entry>
				<entry key="statics">
					<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
						<property name="targetObject">
							<ref local="freemarkerBeansWrapper"/>
						</property>
						<property name="targetMethod">
							<value>getStaticModels</value>
						</property>
					</bean>
				</entry>
				<entry key="enums">
					<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
						<property name="targetObject">
							<ref local="freemarkerBeansWrapper"/>
						</property>
						<property name="targetMethod">
							<value>getEnumModels</value>
						</property>
					</bean>
				</entry>
			</map>
		</property>
	</bean>
	
	<!-- 通过BeanFactoryAware，手动从spring容器获取bean -->
	<bean id="serviceLocator" class="com.yougou.tools.common.utils.ServiceLocator"></bean>
	
	<!-- 业务日志 businessLogger-->
	<bean id="businessLogger" class="com.yougou.api.service.BusinessLogger"></bean>
	
	
	
	<!-- mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:com/belle/yitiansystem/*/dao/mapper/xml/*.xml" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	  <constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.belle.yitiansystem.*.dao.mapper" />
	</bean>
	

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="32"></property>
		<property name="maxIdle" value="6"></property>
		<property name="maxWait" value="1000"></property>
		<property name="testOnBorrow" value="false"></property>
	</bean>
	
	<!-- Jedis ConnectionFactory -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:host-name="${redis.host}" p:port="${redis.port}">
		<property name="poolConfig" ref="jedisPoolConfig"></property>
	</bean>

	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory">
	    <property name="keySerializer" ref="stringRedisSerializer"/>
	    <property name="hashKeySerializer" ref="stringRedisSerializer"/>
	</bean>
	
	<bean id="redisTemplateForSupplierCreate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory">
	    <property name="keySerializer" ref="stringRedisSerializer"/>
	    <property name="hashKeySerializer" ref="stringRedisSerializer"/>
	</bean>
	
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" p:connection-factory-ref="jedisConnectionFactory"/>

    <bean class="com.yougou.tools.common.utils.SpringContextHolder"/>	 
</beans>
